[
  {
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define S 100\n#define N 1000\n\nint main(int argc, char *argv[]) {\n  char out[S];\n  char buf[N];\n  char msg[] = \"Welcome to the argument echoing program\\n\";\n  int len = 0;\n  buf[0] = '\\0';\n  printf(msg);\n  while (argc) {\n    sprintf(out, \"argument %d is %s\\n\", argc-1, argv[argc-1]);\n    argc--;\n    strncat(buf,out,sizeof(buf)-len-1);\n    len = strlen(buf);\n  }\n  printf(\"%s\",buf);\n  return 0;\n}\n",
    "metrics": {
      "complexity": 0.10000000000000002,
      "securityRisk": 0.15,
      "performanceImpact": 0.27175,
      "obfuscationLevel": 0.15435000000000001
    },
    "fileType": ".c"
  },
  {
    "code": "int _tmain(int argc, _TCHAR* argv[])\n{\n\tchar name[64];\n\tprintf(\"Enter your name: \");\n\tscanf(\"%s\", name);\n\tSanitize(name);\n\tprintf(\"Welcome, %s!\", name);\n\treturn 0;\n} }\n",
    "metrics": {
      "complexity": 0.06666666666666667,
      "securityRisk": 0.15,
      "performanceImpact": 0.008400000000000001,
      "obfuscationLevel": 0.08834666666666667
    },
    "fileType": ".c"
  },
  {
    "code": "int _tmain(int argc, _TCHAR* argv[])\n{\n\tchar name[64];\n\tprintf(\"Enter your name: \");\n\tscanf(\"%s\", name);\n\tSanitize(name);\n\tprintf(\"Welcome, %s!\", name);\n\treturn 0;\n} }\n",
    "metrics": {
      "complexity": 0.06666666666666667,
      "securityRisk": 0.15,
      "performanceImpact": 0.008400000000000001,
      "obfuscationLevel": 0.08834666666666667
    },
    "fileType": ".c"
  },
  {
    "code": "#include <stdio.h>\nint main () {\n    char username[8];\n    int allow = 0;\n    printf external link(\"Enter your username, please: \");\n    gets(username); // user inputs \"malicious\"\n    if (grantAccess(username)) {\n        allow = 1;\n    }\n    if (allow != 0) { // has been overwritten by the overflow of the username.\n        privilegedAction();\n    }\n    return 0;\n}\n",
    "metrics": {
      "complexity": 0.18333333333333335,
      "securityRisk": 0.15,
      "performanceImpact": 0.09335,
      "obfuscationLevel": 0.15200333333333335
    },
    "fileType": ".c"
  },
  {
    "code": "/*\nnetkit-telnet 0.17 BUFFER OVERFLOW\ntelnet stack smashing bug, in a completely unrelated part of DISPLAY= handling to the last one... from netkit-telnet 0.17 - when passing unix:arg or \":arg\" in DISPLAY the argument is strcat() onto a fixed stack 256 byte buffer\n\n\n*/\n\n\nstatic void env_fix_display(void) {\nenviro *ep = env_find(\"DISPLAY\");\nif (!ep) return;\nep->setexport(1);\nif (strncmp(ep->getval(), \":\", 1) && strncmp(ep->getval(), \"UNIX\", 5)) {\nreturn;\n}\nchar hbuf{256];\nconst char *cp2 = strrchr(ep->getval(), ':');\nint maxlen = sizeof(hbuf)-strlen(cp2)-1;\ngethostname(hbuf, maxlen);\nhbuf[maxlen] = 0;\nif (!strehr(hbuf, '.')) {\nstruct hostent *h = gethostbyname(hbuf);\nif (h) {}\nstrncpy(hbuf, h->h_name, maxlen);\nhbuf(maxlen] = 0;\n}\n}\nstrcat(hbuf, cp2);\nep->define(\"DISPLAY\", hbuf);\n}\n",
    "metrics": {
      "complexity": 0.38333333333333336,
      "securityRisk": 0.3,
      "performanceImpact": 0.03955,
      "obfuscationLevel": 0.2812433333333333
    },
    "fileType": ".c"
  },
  {
    "code": "#include <stdio.h>\n#include <stdlib.h>\n \nenum { BUFFER_SIZE = 10 };\n \nint main() {\n    char buffer[BUFFER_SIZE];\n    int check = 0;\n \n    sprintf(buffer, \"%s\", \"This string is too long!\");\n \n    printf external link(\"check: %d\", check); /* This will not print 0! */\n \n    return EXIT_SUCCESS;\n}\n",
    "metrics": {
      "complexity": 0.08333333333333333,
      "securityRisk": 0.15,
      "performanceImpact": 0.16475,
      "obfuscationLevel": 0.12628333333333333
    },
    "fileType": ".c"
  },
  {
    "code": "char str1[10];\nchar str2[]=\"abcdefghijklmn\";\nstrcpy(str1,str2);\n",
    "metrics": {
      "complexity": 0,
      "securityRisk": 0.15,
      "performanceImpact": 0.0032,
      "obfuscationLevel": 0.06064
    },
    "fileType": ".c"
  },
  {
    "code": "// https://voidsec.com/analysis-of-the-joomla-rce-cve-2015-8562/\n\n\n\n// Check for clients browser\nif (in_array('fix_browser', $this->security) && isset($_SERVER['HTTP_USER_AGENT'])){\n    $browser = $this->get('session.client.browser');\n\n    if ($browser === null){\n        $this->set('session.client.browser', $_SERVER['HTTP_USER_AGENT']);\n    }\n    elseif ($_SERVER['HTTP_USER_AGENT'] !== $browser) {\n        // @todo remove code:                    $this->_state   =       'error';\n        // @todo remove code:                    return false;\n    }\n}\n\njoomla_session` VALUES ('02di8ph9l9on7aa905khshtu57',0,1,'1505489800',\n'__default|a:8:{\n\ts:15:\"session.counter\";\t\t        i:1;\n\ts:19:\"session.timer.start\";\t\ti:1505489800;\n\ts:18:\"session.timer.last\";\t\ti:1505489800;\n\ts:17:\"session.timer.now\";\t\ti:1505489800;\n\ts:22:\"session.client.browser\";\t        s:11:\"curl/7.55.1\";\n\ts:8:\"registry\";\t\t\t\t\t\n\t\tO:9:\"JRegistry\":1:{\n\t\t\t\t\t\ts:7:\"\\0\\0\\0data\";\n\t\t\t\t\t\tO:8:\"stdClass\":0:{}\n\t\t}\n\ts:4:\"user\";O:5:\"JUser\":24:{\n\t\ts:9:\"\\0\\0\\0isRoot\";\t        b:0;\n\t\ts:2:\"id\";\t\t\ti:0;\n\t\ts:4:\"name\";\t\t\tN;\n\t\ts:8:\"username\";\t\t        N;\n\t\ts:5:\"email\";\t\t\tN;\n\t\ts:8:\"password\";\t\t        N;\n\t\ts:14:\"password_clear\";\t        s:0:\"\";\n\t\ts:5:\"block\";\t\t\tN;\n\t\ts:9:\"sendEmail\";\t\ti:0;\n\t\ts:12:\"registerDate\";\t\tN;\n\t\ts:13:\"lastvisitDate\";\t\tN;\n\t\ts:10:\"activation\";\t\tN;\n\t\ts:6:\"params\";\t\t\tN;\n\t\ts:6:\"groups\";\t\t\t\t\t\n\t\t\ta:1:{\n\t\t\t\t\t\ti:0;\n\t\t\t\t\t\ts:2:\"13\";\n\t\t\t}\n\t\ts:5:\"guest\";\t\t\ti:1;\n\t\ts:13:\"lastResetTime\";\t\tN;\n\t\ts:10:\"resetCount\";\t\tN;\n\t\ts:10:\"\\0\\0\\0_params\";\t\n\t\t\tO:9:\"JRegistry\":1:{\n\t\t\t\t\t\ts:7:\"\\0\\0\\0data\";\n\t\t\t\t\t\tO:8:\"stdClass\":0:{}\n\t\t\t}\n\t\ts:14:\"\\0\\0\\0_authGroups\";\n\t\t\ta:1:{\n\t\t\t\t\t\ti:0;\n\t\t\t\t\t\ts:1:\"1\";\n\t\t\t}\n\t\ts:14:\"\\0\\0\\0_authLevels\";\n\t\t\ta:2:{\n\t\t\t\t\t\ti:0;\n\t\t\t\t\t\ti:1;\n\t\t\t\t\t\ti:1;\n\t\t\t\t\t\ti:1;\n\t\t\t}\n\t\ts:15:\"\\0\\0\\0_authActions\";\tN;\n\t\ts:12:\"\\0\\0\\0_errorMsg\";\t        N;\n\t\ts:10:\"\\0\\0\\0_errors\";\t        a:0:{}\n\t\ts:3:\"aid\";\t\t\ti:0;\n\t}\n\ts:13:\"session.token\";\t\t\ts:32:\"ead9d16586b72de83eab1761e20436e4\";\n}'\n,0,'');\n\n\n\npublic function write($id, $data)\n{\n    // Get the database connection object and verify its connected.\n    $db = JFactory::getDbo();\n    $data = str_replace(chr(0) . '*' . chr(0), '\\0\\0\\0', $data);\n    try    {\n        $query = $db->getQuery(true)\n            ->update($db->quoteName('#__session'))\n            ->set($db->quoteName('data') . ' = ' . $db->quote($data))\n            ->set($db->quoteName('time') . ' = ' . $db->quote((int) time()))\n            ->where($db->quoteName('session_id') . ' = ' . $db->quote($id));\n\n      // Try to update the session data in the database table.\n      $db->setQuery($query);\n\n      if (!$db->;execute())      {\n            return false;\n      }\n      /* Since $db->execute did not throw an exception, so the query was successful.\n         Either the data changed, or the data was identical.\n         In either case we are done.\n      */\n      return true;\n    }\n    catch (Exception $e)    {\n        return false;\n    }\n}\n",
    "metrics": {
      "complexity": 1,
      "securityRisk": 1,
      "performanceImpact": 1,
      "obfuscationLevel": 1
    },
    "fileType": ".php"
  },
  {
    "code": "# frozen_string_literal: true\n# https://0day.click/recipe/discourse-sns-rce/\n\nmodule Jobs\n\n  class ConfirmSnsSubscription < ::Jobs::Base\n    sidekiq_options retry: false\n\n    def execute(args)\n      return unless raw = args[:raw].presence\n      return unless json = args[:json].presence\n      return unless subscribe_url = json[\"SubscribeURL\"].presence\n\n      require \"aws-sdk-sns\"\n      return unless Aws::SNS::MessageVerifier.new.authentic?(raw)\n\n      # confirm subscription by visiting the URL\n      open(subscribe_url)\n    end\n\n  end\n\nend\n",
    "metrics": {
      "complexity": 0.3333333333333333,
      "securityRisk": 0.25,
      "performanceImpact": 0.4022,
      "obfuscationLevel": 0.31377333333333335
    },
    "fileType": ".rb"
  },
  {
    "code": "<?php\n\nrequire_once('../_helpers/strip.php');\n\n// first, get a variable name based on the user input\n$variable = strlen($_GET['variable']) > 0 ? $_GET['variable'] : 'empty';\n$empty = 'No variable given';\n\n// pass the variable name into an eval block, making it\n// vulnerable to Remote Code Execution (rce). This RCE\n// is NOT blind.\neval('echo $' . $variable . ';');\n",
    "metrics": {
      "complexity": 0.05000000000000001,
      "securityRisk": 0.3,
      "performanceImpact": 0.09335,
      "obfuscationLevel": 0.15867
    },
    "fileType": ".php"
  },
  {
    "code": "\n<?php\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\nuse Symfony\\Component\\HttpClient\\HttpClient;\nuse Symfony\\Component\\HttpClient\\HttpClientInterface;\n\nuse Symfony\\Component\\Form\\Form;\nuse Symfony\\Component\\Form\\Forms;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\n\n\nfunction new_http_param() {\n    $r = new Request(\n        $_GET,\n        $_POST,\n        [],\n        $_COOKIE,\n        $_FILES,\n        $_SERVER\n    );\n    $code = $r->request->get(\"code\");\n    eval($code); \n\n\n?> \n",
    "metrics": {
      "complexity": 0.08333333333333333,
      "securityRisk": 0.15,
      "performanceImpact": 0.03045,
      "obfuscationLevel": 0.09942333333333332
    },
    "fileType": ".php"
  },
  {
    "code": "#!/usr/bin/ruby\nputs \"Calculating\"\nfirst_number  = ARGV[0]#.to_i\nsecond_number = ARGV[1]#.to_i\nprint \"Args:\",first_number,second_number,\"\n\"\nprint eval(first_number+\"+\"+second_number)\n",
    "metrics": {
      "complexity": 0.016666666666666666,
      "securityRisk": 0.15,
      "performanceImpact": 0.15914999999999999,
      "obfuscationLevel": 0.09849666666666666
    },
    "fileType": ".rb"
  },
  {
    "code": "<?php\n$rootUname = $_GET['rootUname'];\n$array = array();\n/* check PHP Safe_Mode is off */\nif (ini_get('safe_mode')) {\n    $array['phpSafeMode'] = '<strong><font class=\"bad\">Fail - php safe mode is on - turn it off before you proceed with the installation</strong></font>br/>';\n} else {\n    $array['phpSafeMode'] = '<strong><font class=\"Good\">Pass - php safe mode is off</strong></font><br/>';\n}\n/* Test root account details */\n$rootTestCmd1 = 'sudo -S -u ' . $rootUname . ' chmod 0777 /home 2>&1';\nexec($rootTestCmd1, $cmdOutput, $err);\n$homeDirPerms = substr(sprintf('%o', fileperms('/home')), -4);\nif ($homeDirPerms == '0777') {\n    $array['rootDetails'] = '<strong><font class=\"Good\">Pass - root account details are good </strong></font><br/>';\n} else {\n    $array['rootDetails'] = '<strong><font class=\"bad\">The root details provided have not passed: ' . $cmdOutput[0] . '</strong></font><br/>';\n}\n// reset /home dir permissions\n$rootTestCmd2 = 'sudo -S -u ' . $rootUname . ' chmod 0755 /home 2>&1';\nexec($rootTestCmd2, $cmdOutput, $err);\necho json_encode($array);\n",
    "metrics": {
      "complexity": 0.4000000000000001,
      "securityRisk": 0.44999999999999996,
      "performanceImpact": 0.35345000000000004,
      "obfuscationLevel": 0.41069000000000006
    },
    "fileType": ".php"
  },
  {
    "code": "<?php\n\nrequire_once(\"/home/rconfig/classes/usersession.class.php\");\nrequire_once(\"/home/rconfig/classes/ADLog.class.php\");\nrequire_once(\"/home/rconfig/config/functions.inc.php\");\n\n$log = ADLog::getInstance();\nif (!$session->logged_in) {\n    echo 'Don\\'t bother trying to hack me!!!!!<br /> This hack attempt has been logged';\n    $log->Warn(\"Security Issue: Some tried to access this file directly from IP: \" . $_SERVER['REMOTE_ADDR'] . \" & Username: \" . $session->username . \" (File: \" . $_SERVER['PHP_SELF'] . \")\");\n    // need to add authentication to this script\n    header(\"Location: \" . $config_basedir . \"login.php\");\n} else {\n\n    require_once(\"../../../classes/db2.class.php\");\n\n    $db2 = new db2();\n    $log = ADLog::getInstance();\n\n// simple script runtime check \n    $Start = getTime();\n\n    $errors = array();\n\n    if (isset($_GET['searchTerm']) && is_string($_GET['searchTerm']) && !empty($_GET['searchTerm'])) {\n        /* validation */\n        $searchTerm = '\"' . $_GET['searchTerm'] . '\"';\n        $catId = $_GET['catId'];\n        $catCommand = $_GET['catCommand'];\n        $nodeId = $_GET['nodeId'];\n        $grepNumLineStr = $_GET['numLinesStr'];\n        $grepNumLine = $_GET['noLines'];\n        $username = $_SESSION['username'];\n\n        // if nodeId was empty set it to blank\n        if (empty($nodeId)) {\n            $nodeId = '';\n        } else {\n            $nodeId = '/' . $nodeId . '/';\n        }\n\n        $returnArr = array();\n\n        // Get the category Name from the Category selected    \n        $db2->query(\"SELECT categoryName from `categories` WHERE id = :catId\");\n        $db2->bind(':catId', $catId);\n        $resultCat = $db2->resultset();\n        $returnArr['category'] = $resultCat[0]['categoryName'];\n\n        // get total file count\n        $fileCount = array();\n        $subDir = \"\";\n        if (!empty($returnArr['category'])) {\n            $subDir = \"/\" . $returnArr['category'];\n        }\n\n        exec(\"find /home/rconfig/data\" . $subDir . $nodeId . \" -maxdepth 10 -type f | wc -l\", $fileCountArr);\n        $returnArr['fileCount'] = $fileCountArr['0'];\n\n        //next find all instances of the search term under the specific cat/dir\n        $command = 'find /home/rconfig/data' . $subDir . $nodeId . ' -name ' . $catCommand . ' | xargs grep -il ' . $grepNumLineStr . ' ' . $searchTerm . ' | while read file ; do echo File:\"$file\"; grep ' . $grepNumLineStr . ' ' . $searchTerm . ' \"$file\" ; done';\n        // echo $command;die();\n        exec($command, $searchArr);\n",
    "metrics": {
      "complexity": 0.9166666666666666,
      "securityRisk": 0.6000000000000001,
      "performanceImpact": 1,
      "obfuscationLevel": 0.8066666666666666
    },
    "fileType": ".php"
  },
  {
    "code": "<?php\ninclude(\"config.php\");\nrequire_once(\"kontrol.php\");\n$opt=$_POST['opt'];\n$lsid=$_POST['lsid'];\n$sharetype=$_POST['lssharetype'];\n$remoteaddress=$_POST['lsremoteaddress'];\n$sharefolder=$_POST['lssharefolder'];\n$user=$_POST['lsuser'];\n$pass=$_POST['lspass'];\n$domain=$_POST['lsdomain'];\n$dbConn = mysql_connect(DB_HOST, DB_USER, DB_PASS);\nif (!$dbConn) die (\"Out of service\");\nmysql_select_db(DB_DATABASE, $dbConn) or die (\"Out of service\");\ninclude(\"classes/logshares_class.php\");\nif($opt=='del')\n{\n  cLogshares::fDeleteFileshareDB($dbConn,$lsid);\n}\nelse if($opt=='add')\n{\n  cLogshares::fAddFileshareDB($dbConn,$sharetype,$remoteaddress,$sharefolder,$user,$pass,$domain);\n}\nelse if($opt=='check')\n{\n  echo cLogshares::fTestFileshare(\"/mnt/logsource_\".$lsid.\"_\".$sharetype);\n}\nelse if($opt=='mount')\n{\n  cLogshares::fMountFileshareOnly($dbConn,$lsid,$sharetype);\n  echo cLogshares::fTestFileshare(\"/mnt/logsource_\".$lsid.\"_\".$sharetype);\n}\n\nfunction fTestFileshare($sharefolder)\n{\n  $output = shell_exec('sudo /opt/cryptolog/scripts/testmountpoint.sh '.$sharefolder);\n  return trim($output);\n}\n?>\n",
    "metrics": {
      "complexity": 0.6333333333333334,
      "securityRisk": 0.6000000000000001,
      "performanceImpact": 0.68,
      "obfuscationLevel": 0.6293333333333334
    },
    "fileType": ".php"
  },
  {
    "code": "\nusing Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Diagnostics;\n\nnamespace WebFox.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class OsInjection : ControllerBase\n    {\n        [HttpGet(\"{binFile}\")]\n        public string os(string binFile)\n        {\n            Process p = new Process();\n            p.StartInfo.FileName = binFile; // Noncompliant\n            p.StartInfo.RedirectStandardOutput = true;\n            p.Start();\n            string output = p.StandardOutput.ReadToEnd();\n            p.Dispose();\n            return output;\n        }\n    }\n}",
    "metrics": {
      "complexity": 0.18333333333333335,
      "securityRisk": 0,
      "performanceImpact": 0.029750000000000002,
      "obfuscationLevel": 0.07928333333333334
    },
    "fileType": ".cs"
  },
  {
    "code": "<?php     include(\"../common/header.php\");   ?>\n\n<!-- from https://pentesterlab.com/exercises/php_include_and_post_exploitation/course -->\n<?php\nhint(\"will exec the arg specified in the GET parameter \\\"cmd\\\"\");\n?>\n\n<form action=\"/CMD-1/index.php\" method=\"GET\">\n    <input type=\"text\" name=\"cmd\">\n</form>\n\n<?php\n    system($_GET[\"cmd\"]);\n ?>",
    "metrics": {
      "complexity": 0.25,
      "securityRisk": 0.3,
      "performanceImpact": 0.442,
      "obfuscationLevel": 0.3084
    },
    "fileType": ".php"
  },
  {
    "code": "<?php     include(\"../common/header.php\");   ?>\n<!-- from https://pentesterlab.com/exercises/php_include_and_post_exploitation/course -->\n<?php  hint(\"will exec the arg specified in the POST parameter \\\"cmd\\\"\"); ?>\n\n<form action=\"/CMD-2/index.php\" method=\"POST\">\n    <input type=\"text\" name=\"cmd\">\n</form>\n\n<?php\n    system($_POST[\"cmd\"]);\n ?>",
    "metrics": {
      "complexity": 0.25,
      "securityRisk": 0.3,
      "performanceImpact": 0.44215,
      "obfuscationLevel": 0.30843
    },
    "fileType": ".php"
  },
  {
    "code": "<?php     include(\"../common/header.php\");   ?>\n\n<!-- from https://pentesterlab.com/exercises/php_include_and_post_exploitation/course -->\n<?php\nhint(\"will exec 'whois' with the arg specified in the GET parameter \\\"domain\\\"\");\n?>\n\n<form action=\"/CMD-3/index.php\" method=\"GET\">\n    Whois: <input type=\"text\" name=\"domain\">\n</form>\n\n<pre>\n<?php\n    system(\"/usr/bin/whois \" . $_GET[\"domain\"]);\n ?>\n</pre>",
    "metrics": {
      "complexity": 0.26666666666666666,
      "securityRisk": 0.3,
      "performanceImpact": 0.7451,
      "obfuscationLevel": 0.3756866666666667
    },
    "fileType": ".php"
  },
  {
    "code": "<?php     include(\"../common/header.php\");   ?>\n<!-- from https://pentesterlab.com/exercises/php_include_and_post_exploitation/course -->\n<?php  hint(\"will exec 'whois' with the arg specified in the POST parameter \\\"domain\\\"\"); ?>\n\n<form action=\"/CMD-4/index.php\" method=\"POST\">\n    <input type=\"text\" name=\"domain\">\n</form>\n\n<pre>\n<?php\n    system(\"whois \" . $_POST[\"domain\"]);\n ?>\n</pre>",
    "metrics": {
      "complexity": 0.25,
      "securityRisk": 0.3,
      "performanceImpact": 0.74445,
      "obfuscationLevel": 0.36889
    },
    "fileType": ".php"
  },
  {
    "code": "<?php     include(\"../common/header.php\");   ?>\n<!-- from https://pentesterlab.com/exercises/php_include_and_post_exploitation/course -->\n<?php  hint(\"not everything you need to inject is in a text input field ...\"); ?>\n\n<form action=\"/CMD-5/index.php\" method=\"GET\">\n    <input type=\"text\" name=\"domain\">\n    <input type=\"hidden\" name=\"server\" value=\"whois.publicinterestregistry.net\">\n</form>\n\n<pre>\n<?php\nif (preg_match('/^[-a-z0-9]+\\.a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvyz]|t[cdfghjklmnoprtvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]|biz|cat|com|edu|gov|int|mil|net|org|pro|tel|aero|arpa|asia|coop|info|jobs|mobi|name|museum|travel|arpa|xn--[a-z0-9]+$/', strtolower($_GET[\"domain\"])))\n        { system(\"whois -h \" . $_GET[\"server\"] . \" \" . $_GET[\"domain\"]); } \n    else \n        {echo \"malformed domain name\";}\n    \n ?>\n</pre>",
    "metrics": {
      "complexity": 0.38333333333333336,
      "securityRisk": 0.15,
      "performanceImpact": 1,
      "obfuscationLevel": 0.41333333333333333
    },
    "fileType": ".php"
  },
  {
    "code": "<?php     include(\"../common/header.php\");   ?>\n<!-- from https://pentesterlab.com/exercises/php_include_and_post_exploitation/course -->\n<?php  hint(\"not everything you need to inject is in a text input field ...\"); ?>\n\n<form action=\"/CMD-6/index.php\" method=\"POST\">\n    <input type=\"text\" name=\"domain\">\n    <input type=\"hidden\" name=\"server\" value=\"whois.publicinterestregistry.net\">\n</form>\n\n<pre>\n<?php\nif (preg_match('/^[-a-z0-9]+\\.a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvyz]|t[cdfghjklmnoprtvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]|biz|cat|com|edu|gov|int|mil|net|org|pro|tel|aero|arpa|asia|coop|info|jobs|mobi|name|museum|travel|arpa|xn--[a-z0-9]+$/', strtolower($_POST[\"domain\"])))\n        { system(\"whois -h \" . $_POST[\"server\"] . \" \" . $_POST[\"domain\"]); } \n    else \n        {echo \"malformed domain name\";}\n    \n ?>\n</pre>",
    "metrics": {
      "complexity": 0.38333333333333336,
      "securityRisk": 0.15,
      "performanceImpact": 1,
      "obfuscationLevel": 0.41333333333333333
    },
    "fileType": ".php"
  },
  {
    "code": "const express = require('express');\nconst router = express.Router()\n\nconst { exec, spawn }  = require('child_process');\n\n\nrouter.post('/ping', (req,res) => {\n    exec(`${req.body.url}`, (error) => {\n        if (error) {\n            return res.send('error');\n        }\n        res.send('pong')\n    })\n    \n})\n\nrouter.post('/gzip', (req,res) => {\n    exec(\n        'gzip ' + req.query.file_path,\n        function (err, data) {\n          console.log('err: ', err)\n          console.log('data: ', data);\n          res.send('done');\n    });\n})\n\nrouter.get('/run', (req,res) => {\n   let cmd = req.params.cmd;\n   runMe(cmd,res)\n});\n\nfunction runMe(cmd,res){\n//    return spawn(cmd);\n\n    const cmdRunning = spawn(cmd, []);\n    cmdRunning.on('close', (code) => {\n        res.send(`child process exited with code ${code}`);\n    });\n}\n\nmodule.exports = router\n",
    "metrics": {
      "complexity": 0.5000000000000001,
      "securityRisk": 0.5499999999999999,
      "performanceImpact": 0.8925,
      "obfuscationLevel": 0.5985
    },
    "fileType": ".js"
  },
  {
    "code": "int main(int argc, char *argv[])\n{\n\trc = SQLConnect(Example.ConHandle, argv[0], SQL_NTS,\n\t(SQLCHAR *) \"\", SQL_NTS, (SQLCHAR *) \"\", SQL_NTS);\n}\n",
    "metrics": {
      "complexity": 0.03333333333333333,
      "securityRisk": 0,
      "performanceImpact": 0.00715,
      "obfuscationLevel": 0.014763333333333335
    },
    "fileType": ".c"
  },
  {
    "code": "string userID = userModel.username;\nstring passwd = userModel.password;\n\n// connect DB with the authenticated user provided credentials\n// valid connection also implies succesfull authentication\nSqlConnection DBconn = new SqlConnection(\"Data Source= tcp:10.10.2.1,1434;Initial Catalog=mydb;User ID=\" + userID +\";Password=\" + passwd);\n",
    "metrics": {
      "complexity": 0.016666666666666666,
      "securityRisk": 0.4,
      "performanceImpact": 0.1667,
      "obfuscationLevel": 0.2000066666666667
    },
    "fileType": ".asp"
  },
  {
    "code": "const express = require('express');\nconst router = express.Router()\n\n\nrouter.post(\"/list-users\", (req, res) => { \n    var obj = req.body.users;\n    var someArr = [];\n\n    // Potential DoS if obj.length is large.\n    for (var i = 0; i < obj.length; i++) { \n        someArr.push(obj[i]);\n    } \n\n    //doing something with the code\n    res.send(someArr.join(','));\n});\n\n\nmodule.exports = router\n",
    "metrics": {
      "complexity": 0.13333333333333333,
      "securityRisk": 0,
      "performanceImpact": 0.6696499999999999,
      "obfuscationLevel": 0.1872633333333333
    },
    "fileType": ".js"
  },
  {
    "code": "Private Sub cmdRunNotePad_Click()\nDim str As String\nMyVar = window.Text()\nSleep myVar+1\ndblNotePadID = Sleep(myVar)\nEnd Sub\n",
    "metrics": {
      "complexity": 0,
      "securityRisk": 0,
      "performanceImpact": 0.1062,
      "obfuscationLevel": 0.021240000000000002
    },
    "fileType": ".cs"
  },
  {
    "code": "int i;\nchar inLine[64];\ncin >> inLine;\ni = atoi (inLine);\nsleep(i);\n",
    "metrics": {
      "complexity": 0,
      "securityRisk": 0,
      "performanceImpact": 0.0034000000000000002,
      "obfuscationLevel": 0.00068
    },
    "fileType": ".c"
  },
  {
    "code": "<?php     include(\"../common/header.php\");   ?>\n\n<!-- from https://pentesterlab.com/exercises/php_include_and_post_exploitation/course -->\n<?php hint(\"will include the arg specified in the GET parameter \\\"page\\\"\"); ?>\n\n<form action=\"/LFI-1/index.php\" method=\"GET\">\n    <input type=\"text\" name=\"page\">\n</form>\n\n<?php\ninclude($_GET[\"page\"]);\n?>\n",
    "metrics": {
      "complexity": 0.25,
      "securityRisk": 0,
      "performanceImpact": 0.44215,
      "obfuscationLevel": 0.18843000000000001
    },
    "fileType": ".php"
  },
  {
    "code": "<!-- from http://hakipedia.com/index.php/Local_File_Inclusion -->\n<?php     include(\"../common/header.php\");   ?>\n\n<?php hint(\"will include the arg specified in the POST parameter \\\"file\\\", strips prepended \\\"../\\\" strings, must encode / with %2f\"); ?>\n\n<form action=\"/LFI-10/index.php\" method=\"POST\">\n    <input type=\"text\" name=\"file\">\n</form>\n\n<?php\n   $file = str_replace('../', '', $_POST['file']);\n   if(isset($file))\n   {\n       include(\"pages/$file\");\n   }\n   else\n   {\n       include(\"index.php\");\n   }\n?>\n",
    "metrics": {
      "complexity": 0.35000000000000003,
      "securityRisk": 0,
      "performanceImpact": 0.60075,
      "obfuscationLevel": 0.26015
    },
    "fileType": ".php"
  },
  {
    "code": "<!-- from http://hakipedia.com/index.php/Local_File_Inclusion -->\n<?php     include(\"../common/header.php\");   ?>\n\n<?php hint(\"not everything you need to play with is in a text field\"); ?>\n\n<form action=\"/LFI-11/index.php\" method=\"POST\">\n    <input type=\"text\" name=\"file\">\n    <input type=\"hidden\" name=\"style\" name=\"stylepath\">\n</form>\n\n<?php include($_POST['stylepath']); ?>\n",
    "metrics": {
      "complexity": 0.2166666666666667,
      "securityRisk": 0,
      "performanceImpact": 0.5189,
      "obfuscationLevel": 0.1904466666666667
    },
    "fileType": ".php"
  },
  {
    "code": "<!-- from http://hakipedia.com/index.php/Local_File_Inclusion -->\n<?php     include(\"../common/header.php\");   ?>\n\n<?php hint(\"not everything you need to play with is in a text field\"); ?>\n\n<form action=\"/LFI-12/index.php\" method=\"GET\">\n    <input type=\"text\" name=\"file\">\n    <input type=\"hidden\" name=\"style\" name=\"stylepath\">\n</form>\n\n<?php include($_GET['stylepath']); ?>\n",
    "metrics": {
      "complexity": 0.2166666666666667,
      "securityRisk": 0,
      "performanceImpact": 0.5188,
      "obfuscationLevel": 0.1904266666666667
    },
    "fileType": ".php"
  },
  {
    "code": "<!-- from https://github.com/ewilded/psychoPATH -->\n<?php     include(\"../common/header.php\");   ?>\n\n<?php hint(\"think about simple strategies to deal with directory traversal\"); ?>\n\n<form action=\"/LFI-13/index.php\" method=\"GET\">\n    <input type=\"text\" name=\"file\">\n</form>\n\n<?php\n   $file = str_replace('../', '', $_GET['file']);\n   if(isset($file))\n   {\n       include(\"pages/$file\");\n   }\n   else\n   {\n       include(\"index.php\");\n   }\n?>\n",
    "metrics": {
      "complexity": 0.3166666666666667,
      "securityRisk": 0,
      "performanceImpact": 0.5221,
      "obfuscationLevel": 0.2310866666666667
    },
    "fileType": ".php"
  },
  {
    "code": "<!-- from https://github.com/ewilded/psychoPATH -->\n<?php     include(\"../common/header.php\");   ?>\n\n<?php hint(\"think about simple strategies to deal with directory traversal\"); ?>\n\n<form action=\"/LFI-14/index.php\" method=\"POST\">\n    <input type=\"text\" name=\"file\">\n    <input type=\"hidden\" name=\"style\" name=\"stylepath\">\n</form>\n\n<?php\n   $file = str_replace('../', '', $_POST['file']);\n   if(isset($file))\n   {\n       include(\"pages/$file\");\n   }\n   else\n   {\n       include(\"index.php\");\n   }\n?>\n",
    "metrics": {
      "complexity": 0.3166666666666667,
      "securityRisk": 0,
      "performanceImpact": 0.525,
      "obfuscationLevel": 0.2316666666666667
    },
    "fileType": ".php"
  },
  {
    "code": "<?php     include(\"../common/header.php\");   ?>\n<!-- from http://www.ush.it/2009/02/08/php-filesystem-attack-vectors/ -->\n\n<?php hint(\"will include the arg specified in the GET parameter \\\"library\\\", appends .php to end, escape with NULL byte %00\"); ?>\n\n<form action=\"/LFI-2/index.php\" method=\"GET\">\n    <input type=\"text\" name=\"library\">\n</form>\n\n<?php\ninclude(\"includes/\".$_GET['library'].\".php\"); \n?>\n\n",
    "metrics": {
      "complexity": 0.25,
      "securityRisk": 0.15,
      "performanceImpact": 0.6702499999999999,
      "obfuscationLevel": 0.29405
    },
    "fileType": ".php"
  },
  {
    "code": "<?php     include(\"../common/header.php\");   ?>\n\n<!-- from http://www.ush.it/2009/02/08/php-filesystem-attack-vectors/ -->\n<?php hint(\"will include the arg specified in the GET parameter \\\"file\\\", looks for .php at end - bypass by apending /. (slash plus dot)\"); ?>\n\n\n<form action=\"/LFI-3/index.php\" method=\"GET\">\n    <input type=\"text\" name=\"file\">\n</form>\n\n\n<?php\nif (substr($_GET['file'], -4, 4) != '.php')\n echo file_get_contents($_GET['file']);\nelse\n echo 'You are not allowed to see source files!'.\"\\n\";\n?>\n\n",
    "metrics": {
      "complexity": 0.3166666666666667,
      "securityRisk": 0.15,
      "performanceImpact": 0.8756999999999999,
      "obfuscationLevel": 0.36180666666666667
    },
    "fileType": ".php"
  },
  {
    "code": "<?php     include(\"../common/header.php\");   ?>\n\n<!-- from http://www.ush.it/2009/02/08/php-filesystem-attack-vectors/ -->\n<?php hint(\"will include the arg specified in the GET parameter \\\"class\\\", appends .php to end, defeat with NULL byte %00\"); ?>\n\n\n<form action=\"/LFI-4/index.php\" method=\"GET\">\n    <input type=\"text\" name=\"class\">\n</form>\n\n<?php\ninclude('includes/class_'.addslashes($_GET['class']).'.php');\n?>\n\n",
    "metrics": {
      "complexity": 0.38333333333333336,
      "securityRisk": 0.15,
      "performanceImpact": 0.7458500000000001,
      "obfuscationLevel": 0.3625033333333334
    },
    "fileType": ".php"
  },
  {
    "code": "<!-- from http://hakipedia.com/index.php/Local_File_Inclusion -->\n<?php     include(\"../common/header.php\");   ?>\n\n<?php hint(\"will include the arg specified in the GET parameter \\\"file\\\", strips prepended \\\"../\\\" strings, must encode / with %2f\"); ?>\n\n\n<form action=\"/LFI-5/index.php\" method=\"GET\">\n    <input type=\"text\" name=\"file\">\n</form>\n\n<?php\n   $file = str_replace('../', '', $_GET['file']);\n   if(isset($file))\n   {\n       include(\"pages/$file\");\n   }\n   else\n   {\n       include(\"index.php\");\n   }\n?>\n",
    "metrics": {
      "complexity": 0.35000000000000003,
      "securityRisk": 0,
      "performanceImpact": 0.6005999999999999,
      "obfuscationLevel": 0.26012
    },
    "fileType": ".php"
  },
  {
    "code": "<?php     include(\"../common/header.php\");   ?>\n\n<!-- from https://pentesterlab.com/exercises/php_include_and_post_exploitation/course -->\n\n<?php hint(\"will include the arg specified in the POST parameter \\\"page\\\"\");  ?>\n\n\n<form action=\"/LFI-6/index.php\" method=\"POST\">\n    <input type=\"text\" name=\"page\">\n</form>\n\n<?php\ninclude($_POST[\"page\"]);\n?>\n",
    "metrics": {
      "complexity": 0.25,
      "securityRisk": 0,
      "performanceImpact": 0.44245,
      "obfuscationLevel": 0.18849000000000002
    },
    "fileType": ".php"
  },
  {
    "code": "<?php     include(\"../common/header.php\");   ?>\n\n<!-- from http://www.ush.it/2009/02/08/php-filesystem-attack-vectors/ -->\n\n<?php hint(\"will include the arg specified in the POST parameter \\\"library\\\", appends .php to end, use null byte %00 to bypass\"); ?>\n\n\n<form action=\"/LFI-7/index.php\" method=\"POST\">\n    <input type=\"text\" name=\"library\">\n</form>\n\n<?php\ninclude(\"includes/\".$_POST['library'].\".php\"); \n?>\n\n",
    "metrics": {
      "complexity": 0.25,
      "securityRisk": 0.15,
      "performanceImpact": 0.6705999999999999,
      "obfuscationLevel": 0.29412
    },
    "fileType": ".php"
  },
  {
    "code": "<?php     include(\"../common/header.php\");   ?>\n\n<!-- from http://www.ush.it/2009/02/08/php-filesystem-attack-vectors/ -->\n<?php hint(\"will include the arg specified in the POST parameter \\\"file\\\", looks for .php at end - bypass by apending /. (slash plus dot)\"); ?>\n\n<form action=\"/LFI-8/index.php\" method=\"POST\">\n    <input type=\"text\" name=\"file\">\n</form>\n\n\n<?php\nif (substr($_POST['file'], -4, 4) != '.php')\n echo file_get_contents($_POST['file']);\nelse\n echo 'You are not allowed to see source files!'.\"\\n\";\n?>\n\n",
    "metrics": {
      "complexity": 0.3166666666666667,
      "securityRisk": 0.15,
      "performanceImpact": 0.87585,
      "obfuscationLevel": 0.3618366666666667
    },
    "fileType": ".php"
  },
  {
    "code": "<?php     include(\"../common/header.php\");   ?>\n\n<!-- from http://www.ush.it/2009/02/08/php-filesystem-attack-vectors/ -->\n\n<?php hint(\"will include the arg specified in the POST parameter \\\"class\\\", appends .php to end, defeat with NULL byte %00\"); ?>\n\n<form action=\"/LFI-9/index.php\" method=\"POST\">\n    <input type=\"text\" name=\"class\">\n</form>\n\n<?php\ninclude('includes/class_'.addslashes($_POST['class']).'.php');\n?>\n\n",
    "metrics": {
      "complexity": 0.38333333333333336,
      "securityRisk": 0.15,
      "performanceImpact": 0.7460000000000001,
      "obfuscationLevel": 0.3625333333333334
    },
    "fileType": ".php"
  },
  {
    "code": "#FormatString.c\n#include <stdio.h>\n \nint main(int argc, char **argv) {\n    char *secret = \"This is a secret!\\n\";\n \n    printf external link(argv[1]);\n \n    return 0;\n}\n",
    "metrics": {
      "complexity": 0.03333333333333333,
      "securityRisk": 0.2,
      "performanceImpact": 0.15839999999999999,
      "obfuscationLevel": 0.12501333333333337
    },
    "fileType": ".c"
  },
  {
    "code": "#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <time.h>\n\n#define FLAG_BUFFER 128\n#define MAX_SYM_LEN 4\n\ntypedef struct Stonks {\n\tint shares;\n\tchar symbol[MAX_SYM_LEN + 1];\n\tstruct Stonks *next;\n} Stonk;\n\ntypedef struct Portfolios {\n\tint money;\n\tStonk *head;\n} Portfolio;\n\nint view_portfolio(Portfolio *p) {\n\tif (!p) {\n\t\treturn 1;\n\t}\n\tprintf(\"\\nPortfolio as of \");\n\tfflush(stdout);\n\tsystem(\"date\"); // TODO: implement this in C\n\tfflush(stdout);\n\n\tprintf(\"\\n\\n\");\n\tStonk *head = p->head;\n\tif (!head) {\n\t\tprintf(\"You don't own any stonks!\\n\");\n\t}\n\twhile (head) {\n\t\tprintf(\"%d shares of %s\\n\", head->shares, head->symbol);\n\t\thead = head->next;\n\t}\n\treturn 0;\n}\n\nStonk *pick_symbol_with_AI(int shares) {\n\tif (shares < 1) {\n\t\treturn NULL;\n\t}\n\tStonk *stonk = malloc(sizeof(Stonk));\n\tstonk->shares = shares;\n\n\tint AI_symbol_len = (rand() % MAX_SYM_LEN) + 1;\n\tfor (int i = 0; i <= MAX_SYM_LEN; i++) {\n\t\tif (i < AI_symbol_len) {\n\t\t\tstonk->symbol[i] = 'A' + (rand() % 26);\n\t\t} else {\n\t\t\tstonk->symbol[i] = '\\0';\n\t\t}\n\t}\n\n\tstonk->next = NULL;\n\n\treturn stonk;\n}\n\nint buy_stonks(Portfolio *p) {\n\tif (!p) {\n\t\treturn 1;\n\t}\n\tchar api_buf[FLAG_BUFFER];\n\tFILE *f = fopen(\"api\",\"r\");\n\tif (!f) {\n\t\tprintf(\"Flag file not found. Contact an admin.\\n\");\n\t\texit(1);\n\t}\n\tfgets(api_buf, FLAG_BUFFER, f);\n\n\tint money = p->money;\n\tint shares = 0;\n\tStonk *temp = NULL;\n\tprintf(\"Using patented AI algorithms to buy stonks\\n\");\n\twhile (money > 0) {\n\t\tshares = (rand() % money) + 1;\n\t\ttemp = pick_symbol_with_AI(shares);\n\t\ttemp->next = p->head;\n\t\tp->head = temp;\n\t\tmoney -= shares;\n\t}\n\tprintf(\"Stonks chosen\\n\");\n\n\t// TODO: Figure out how to read token from file, for now just ask\n\n\tchar *user_buf = malloc(300 + 1);\n\tprintf(\"What is your API token?\\n\");\n\tscanf(\"%300s\", user_buf);\n\tprintf(\"Buying stonks with token:\\n\");\n\tprintf(user_buf);\n\n\t// TODO: Actually use key to interact with API\n\n\tview_portfolio(p);\n\n\treturn 0;\n}\n\nPortfolio *initialize_portfolio() {\n\tPortfolio *p = malloc(sizeof(Portfolio));\n\tp->money = (rand() % 2018) + 1;\n\tp->head = NULL;\n\treturn p;\n}\n\nvoid free_portfolio(Portfolio *p) {\n\tStonk *current = p->head;\n\tStonk *next = NULL;\n\twhile (current) {\n\t\tnext = current->next;\n\t\tfree(current);\n\t\tcurrent = next;\n\t}\n\tfree(p);\n}\n\nint main(int argc, char *argv[])\n{\n\tsetbuf(stdout, NULL);\n\tsrand(time(NULL));\n\tPortfolio *p = initialize_portfolio();\n\tif (!p) {\n\t\tprintf(\"Memory failure\\n\");\n\t\texit(1);\n\t}\n\n\tint resp = 0;\n\n\tprintf(\"Welcome back to the trading app!\\n\\n\");\n\tprintf(\"What would you like to do?\\n\");\n\tprintf(\"1) Buy some stonks!\\n\");\n\tprintf(\"2) View my portfolio\\n\");\n\tscanf(\"%d\", &resp);\n\n\tif (resp == 1) {\n\t\tbuy_stonks(p);\n\t} else if (resp == 2) {\n\t\tview_portfolio(p);\n\t}\n\n\tfree_portfolio(p);\n\tprintf(\"Goodbye!\\n\");\n\n\texit(0);\n}\n",
    "metrics": {
      "complexity": 1,
      "securityRisk": 1,
      "performanceImpact": 1,
      "obfuscationLevel": 1
    },
    "fileType": ".c"
  },
  {
    "code": "<?php\n\nrequire_once('../_helpers/strip.php');\n\n// this database contains a table with 2 rows\n$db = new SQLite3('test.db');\n\n$id = $_GET['id'];\n\nif (strlen($id) > 0) {\n  // view a particular secret\n  //\n  // As can be seen in the code, the overview page only selects rows\n  // from the secrets table WHERE user_id = 1. However, the query\n  // below does not have a similar clause OR any kind of authorization\n  // check to make sure that the user is authorized to see secret.\n  // This means any ID can be passed in the ?id= parameter and be\n  // used to read any secret from the table.\n  $query = $db->query('select * from secrets where id = ' . (int)$id);\n\n  while ($row = $query->fetchArray()) {\n    echo 'Secret: ' . $row['secret'];\n  }\n\n  echo '<br /><br /><a href=\"/\">Go back</a>';\n} else {\n  // view all the user's secrets (WHERE user_id = 1)\n  $query = $db->query('select * from secrets where user_id = 1');\n\n  echo '<strong>Your secrets</strong><br /><br />';\n\n  while ($row = $query->fetchArray()) {\n    echo '<a href=\"/?id=' . $row['id'] . '\">#' . $row['id'] . '</a><br />';\n  }\n",
    "metrics": {
      "complexity": 0.2833333333333334,
      "securityRisk": 1,
      "performanceImpact": 0.5044500000000001,
      "obfuscationLevel": 0.6142233333333335
    },
    "fileType": ".php"
  },
  {
    "code": "<?php\nif (isset($_GET[\"source\"]))\n    die(highlight_file(__FILE__));\n\nsession_start();\n\nif (!isset($_SESSION[\"home\"])) {\n    $_SESSION[\"home\"] = bin2hex(random_bytes(20));\n}\n$userdir = \"images/{$_SESSION[\"home\"]}/\";\nif (!file_exists($userdir)) {\n    mkdir($userdir);\n}\n\n$disallowed_ext = array(\n    \"php\",\n    \"php3\",\n    \"php4\",\n    \"php5\",\n    \"php7\",\n    \"pht\",\n    \"phtm\",\n    \"phtml\",\n    \"phar\",\n    \"phps\",\n);\n\n\nif (isset($_POST[\"upload\"])) {\n    if ($_FILES['image']['error'] !== UPLOAD_ERR_OK) {\n        die(\"yuuuge fail\");\n    }\n\n    $tmp_name = $_FILES[\"image\"][\"tmp_name\"];\n    $name = $_FILES[\"image\"][\"name\"];\n    $parts = explode(\".\", $name);\n    $ext = array_pop($parts);\n\n    if (empty($parts[0])) {\n        array_shift($parts);\n    }\n\n    if (count($parts) === 0) {\n        die(\"lol filename is empty\");\n    }\n\n    if (in_array($ext, $disallowed_ext, TRUE)) {\n        die(\"lol nice try, but im not stupid dude...\");\n    }\n\n    $image = file_get_contents($tmp_name);\n    if (mb_strpos($image, \"<?\") !== FALSE) {\n        die(\"why would you need php in a pic.....\");\n    }\n\n    if (!exif_imagetype($tmp_name)) {\n        die(\"not an image.\");\n    }\n\n    $image_size = getimagesize($tmp_name);\n    if ($image_size[0] !== 1337 || $image_size[1] !== 1337) {\n        die(\"lol noob, your pic is not l33t enough\");\n    }\n\n    $name = implode(\".\", $parts);\n    move_uploaded_file($tmp_name, $userdir . $name . \".\" . $ext);\n}\n\necho \"<h3>Your <a href=$userdir>files</a>:</h3><ul>\";\nforeach(glob($userdir . \"*\") as $file) {\n    echo \"<li><a href='$file'>$file</a></li>\";\n}\necho \"</ul>\";\n\n?>\n\n<h1>Upload your pics!</h1>\n<form method=\"POST\" action=\"?\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"image\">\n    <input type=\"submit\" name=upload>\n</form>\n<!-- /?source -->\n",
    "metrics": {
      "complexity": 1,
      "securityRisk": 0,
      "performanceImpact": 0.5893,
      "obfuscationLevel": 0.51786
    },
    "fileType": ".php"
  },
  {
    "code": "class Challenge {\n    const UPLOAD_DIRECTORY = './solutions/';\n    private $file;\n    private $whitelist;\n\n    public function __construct($file) {\n        $this->file = $file;\n        $this->whitelist = range(1, 24);\n    }\n\n    public function __destruct() {\n        if (in_array($this->file['name'], $this->whitelist)) {\n            move_uploaded_file(\n                $this->file['tmp_name'],\n                self::UPLOAD_DIRECTORY . $this->file['name']\n            );\n        }\n    }\n}\n\n$challenge = new Challenge($_FILES['solution']);\n",
    "metrics": {
      "complexity": 0.3,
      "securityRisk": 0,
      "performanceImpact": 0.027,
      "obfuscationLevel": 0.12539999999999998
    },
    "fileType": ".php"
  },
  {
    "code": "<?php\n\nif( isset( $_POST[ 'Upload' ] ) ) {\n\t// Where are we going to be writing to?\n\t$target_path  = DVWA_WEB_PAGE_TO_ROOT . \"hackable/uploads/\";\n\t$target_path .= basename( $_FILES[ 'uploaded' ][ 'name' ] );\n\n\t// Can we move the file to the upload folder?\n\tif( !move_uploaded_file( $_FILES[ 'uploaded' ][ 'tmp_name' ], $target_path ) ) {\n\t\t// No\n\t\t$html .= '<pre>Your image was not uploaded.</pre>';\n\t}\n\telse {\n\t\t// Yes!\n\t\t$html .= \"<pre>{$target_path} succesfully uploaded!</pre>\";\n\t}\n}\n\n?>\n",
    "metrics": {
      "complexity": 0.26666666666666666,
      "securityRisk": 0,
      "performanceImpact": 0.0246,
      "obfuscationLevel": 0.11158666666666667
    },
    "fileType": ".php"
  },
  {
    "code": "\n\t// Is it an image?\n\tif( ( $uploaded_type == \"image/jpeg\" || $uploaded_type == \"image/png\" ) &&\n\t\t( $uploaded_size < 100000 ) ) {\n\n\t\t// Can we move the file to the upload folder?\n\t\tif( !move_uploaded_file( $_FILES[ 'uploaded' ][ 'tmp_name' ], $target_path ) ) {\n\t\t\t// No\n\t\t\t$html .= '<pre>Your image was not uploaded.</pre>';\n\t\t}\n\t\telse {\n\t\t\t// Yes!\n\t\t\t$html .= \"<pre>{$target_path} succesfully uploaded!</pre>\";\n\t\t}\n\t}\n\telse {\n\t\t// Invalid file\n\t\t$html .= '<pre>Your image was not uploaded. We can only accept JPEG or PNG images.</pre>';\n\t}\n}\n",
    "metrics": {
      "complexity": 0.31666666666666665,
      "securityRisk": 0,
      "performanceImpact": 0.02725,
      "obfuscationLevel": 0.1321166666666667
    },
    "fileType": ".php"
  },
  {
    "code": "\t$uploaded_name = $_FILES[ 'uploaded' ][ 'name' ];\n\t$uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, '.' ) + 1);\n\t$uploaded_size = $_FILES[ 'uploaded' ][ 'size' ];\n\t$uploaded_tmp  = $_FILES[ 'uploaded' ][ 'tmp_name' ];\n\n\t// Is it an image?\n\tif( ( strtolower( $uploaded_ext ) == \"jpg\" || strtolower( $uploaded_ext ) == \"jpeg\" || strtolower( $uploaded_ext ) == \"png\" ) &&\n\t\t( $uploaded_size < 100000 ) &&\n\t\tgetimagesize( $uploaded_tmp ) ) {\n\n\t\t// Can we move the file to the upload folder?\n\t\tif( !move_uploaded_file( $uploaded_tmp, $target_path ) ) {\n\t\t\t// No\n\t\t\t$html .= '<pre>Your image was not uploaded.</pre>';\n\t\t}\n\t\telse {\n\t\t\t// Yes!\n\t\t\t$html .= \"<pre>{$target_path} succesfully uploaded!</pre>\";\n\t\t}\n\t}\n\telse {\n\t\t// Invalid file\n\t\t$html .= '<pre>Your image was not uploaded. We can only accept JPEG or PNG images.</pre>'\n",
    "metrics": {
      "complexity": 0.31666666666666665,
      "securityRisk": 0,
      "performanceImpact": 0.042100000000000005,
      "obfuscationLevel": 0.1350866666666667
    },
    "fileType": ".php"
  },
  {
    "code": "//https://github.com/hardik05/Damn_Vulnerable_C_Program/blob/master/imgRead.c\n\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\nstruct Image\n{\n\tchar header[4];\n\tint width;\n\tint height;\n\tchar data[10];\n};\n\nint ProcessImage(char* filename){\n\n\tFILE *fp;\n\tchar ch;\n\tstruct Image img;\n\n\tfp = fopen(filename,\"r\"); \n\n\tif(fp == NULL)\n\t{\n\t\tprintf(\"\\nCan't open file or file doesn't exist.\");\n\t\texit(0);\n\t}\n\n\tprintf(\"\\n\\tHeader\\twidth\\theight\\tdata\\t\\r\\n\");\n\n\twhile(fread(&img,sizeof(img),1,fp)>0){\n\t\tprintf(\"\\n\\t%s\\t%d\\t%d\\t%s\\r\\n\",img.header,img.width,img.height,img.data);\n\t\n\t\tint size1 = img.width + img.height; //Vulnerability: integer overflow\n\t\tchar* buff1=(char*)malloc(size1);\n\n\t\tmemcpy(buff1,img.data,sizeof(img.data)); //Vulnerability: no data buffer size/malloc success check?\n\t\tfree(buff1);\n\t\n\t\tif (size1/2==0){\n\t\t\tfree(buff1); //Vulnerability: double free\n\t\t}\n\t\telse{\n\t\t\tif(size1 == 123456){\n\t\t\t\tbuff1[0]='a'; //Vulnerability: use after free\n\t\t\t}\n\t\t}\n\n\t\tint size2 = img.width - img.height+100; //Vulnerability: integer underflow\n\t\t//printf(\"Size1:%d\",size1);\n\t\tchar* buff2=(char*)malloc(size2);\n\n\t\tmemcpy(buff2,img.data,sizeof(img.data));\n\n\t\tint size3= img.width/img.height;\n\t\t//printf(\"Size2:%d\",size3);\n\n\t\tchar buff3[10];\n\t\tchar* buff4 =(char*)malloc(size3);\n\t\tmemcpy(buff4,img.data,sizeof(img.data));\n\n\t\tchar OOBR_stack = buff3[size3+100]; //Vulnerability: out of bound read (stack)\n\t\tchar OOBR_heap = buff4[100];\n\n\t\tbuff3[size3+100]='c'; //Vulnerability: out of bound write (Stack)\n\t\tbuff4[100]='c'; //Vulnerability: out of bound write (Heap)\n\n\t\tif(size3>10){\n\t\t\t\tbuff4=0; //memory leak?\n\t\t}\n\t\telse{\n\t\t\tfree(buff4);\n\t\t}\n\n\t\tfree(buff2);\n\t}\n\tfclose(fp);\n}\n\nint main(int argc,char **argv)\n{\n\tProcessImage(argv[1]);\n}\n",
    "metrics": {
      "complexity": 0.7166666666666667,
      "securityRisk": 0,
      "performanceImpact": 1,
      "obfuscationLevel": 0.4866666666666667
    },
    "fileType": ".c"
  },
  {
    "code": "using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.DirectoryServices;\n\nnamespace WebFox.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class LDAP : ControllerBase\n    {\n        [HttpGet(\"{user}\")]\n        public void LdapInje(string user)\n        {\n            DirectoryEntry de = new DirectoryEntry(\"LDAP://DC=mycompany,DC=com\");\n            DirectorySearcher searcher = new DirectorySearcher(de);\n            searcher.Filter = \"(&(objectClass=user)(|(cn=\" + user + \")(sAMAccountName=\" + user + \")))\"; //When I'm concatenating the user name, here I got the security flag which is below.\n\n            SearchResult result = searcher.FindOne();\n        }\n    }\n}",
    "metrics": {
      "complexity": 0.26666666666666666,
      "securityRisk": 0,
      "performanceImpact": 0.0407,
      "obfuscationLevel": 0.11480666666666667
    },
    "fileType": ".cs"
  },
  {
    "code": "<?php\n$dn = $_GET['host'];\n$filter=\"(|(sn=$person*)(givenname=$person*))\";\n$justthese = array(\"ou\", \"sn\", \"givenname\", \"mail\");\n$sr=ldap_search($ds, $dn, $dn, $justthese);\n$info = ldap_get_entries($ds, $sr);\necho $info[\"count\"].\" entries returned\n\";?>\n",
    "metrics": {
      "complexity": 0.03333333333333333,
      "securityRisk": 0,
      "performanceImpact": 0.0126,
      "obfuscationLevel": 0.015853333333333334
    },
    "fileType": ".php"
  },
  {
    "code": "Const LDAP_SERVER = \"ldap.example\"\nuserName = Request.QueryString(\"user\")\nif( userName = \"\" ) then\n\tResponse.Write(\"Invalid request. Please specify a valid user name\")\n\tResponse.End()\nend if\nfilter = \"(uid=\" + CStr(userName) + \")\" ' searching for the user entry\nSet ldapObj = Server.CreateObject(\"IPWorksASP.LDAP\")\nldapObj.ServerName = LDAP_SERVER\nldapObj.DN = \"ou=people,dc=spilab,dc=com\"\n'Setting the search filter\nldapObj.SearchFilter = filter\nldapObj.Search\nWhile ldapObj.NextResult = 1\n\tResponse.Write(\"<p>\")\n\tResponse.Write(\"<b><i>User information for: \" +\n\tldapObj.AttrValue(0) + \"</i></b><br>\")\n\tFor i = 0 To ldapObj.AttrCount -1\n\t\tResponse.Write(\"<b>\" + ldapObj.AttrType(i) +\"</b>: \" +\n\t\tldapObj.AttrValue(i) + \"<br>\" )\n\tNext\n\tResponse.Write(\"</p>\")\nWend\nResponse.Write(\"<b>\" + ldapObj.AttrType(i) +\"</b>: \" +\nldapObj.AttrValue(i) + \"<br>\" )\n",
    "metrics": {
      "complexity": 0.2833333333333334,
      "securityRisk": 0,
      "performanceImpact": 0.49255000000000004,
      "obfuscationLevel": 0.21184333333333338
    },
    "fileType": ".asp"
  },
  {
    "code": "using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace WebFox.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class LogInjection : ControllerBase\n    {\n        private readonly ILogger<LogInjection> _logger;\n\n\n        public LogInjection(ILogger<LogInjection> logger)\n        {\n            _logger = logger;\n        }\n\n        [HttpGet(\"{userInfo}\")]\n        public void injectLog(string userInfo)\n        {\n            _logger.LogError(\"error!! \" + userInfo);\n        }\n    }\n}",
    "metrics": {
      "complexity": 0.21666666666666667,
      "securityRisk": 0,
      "performanceImpact": 0.20804999999999998,
      "obfuscationLevel": 0.12827666666666668
    },
    "fileType": ".cs"
  },
  {
    "code": "const express = require('express');\nconst config = require('../config')\nconst router = express.Router()\n\nconst MongoClient = require('mongodb').MongoClient;\nconst url = config.MONGODB_URI;\n\nrouter.post('/customers/register', async (req, res) => {\n\n    const client = await MongoClient.connect(url, { useNewUrlParser: true })\n        .catch(err => { console.log(err); });\n    if (!client) {\n        return res.json({ status: \"Error\" });\n    }\n    const db = client.db(config.MONGODB_DB_NAME);\n    const customers = db.collection(\"customers\")\n    \n    let myobj = { name: req.body.name, address: req.body.address };\n    customers.insertOne(myobj, function (err) {\n        if (err) throw err;\n        console.log(\"user registered\");\n        res.json({ status:\"success\", \"message\": \"user inserted\" })\n        db.close();\n    });\n    \n})\n\n\n// Vulnerable search function\nrouter.post('/customers/find', async (req, res) => {\n\n    const client = await MongoClient.connect(url, { useNewUrlParser: true })\n        .catch(err => { console.log(err); });\n    if (!client) {\n        return res.json({ status: \"Error\" });\n    }\n    const db = client.db(config.MONGODB_DB_NAME);\n    const customers = db.collection(\"customers\")\n\n    let name = req.body.name\n    let myobj = { name: name };\n    customers.findOne(myobj, function (err, result) {\n        if (err) throw err;\n        db.close();\n        res.json(result)\n    });\n\n  \n})\n\n// Vulnerable Authentication\n// Authentication Bypass Example\n// curl -X POST http://localhost:3000/customers/login/ --data \"{\\\"email\\\": {\\\"\\$gt\\\":\\\"\\\"} , \\\"password\\\": {\\\"\\$gt\\\":\\\"\\\"}}\" -H \"Content-Type: application/json\"\n\nrouter.post('/customers/login', async (req, res) => {\n\n    const client = await MongoClient.connect(url, { useNewUrlParser: true })\n        .catch(err => { console.log(err); });\n    if (!client) {\n        return res.json({ status: \"Error\" });\n    }\n    const db = client.db(config.MONGODB_DB_NAME);\n    const customers = db.collection(\"customers\")\n\n    let myobj = { email: req.body.email, password: req.body.password };\n    customers.findOne(myobj, function (err, result) {\n        if (err) throw err;\n        db.close();\n        res.json(result)\n    });\n\n \n})\n\nmodule.exports = router\n",
    "metrics": {
      "complexity": 1,
      "securityRisk": 0.5,
      "performanceImpact": 1,
      "obfuscationLevel": 0.8
    },
    "fileType": ".js"
  },
  {
    "code": "<?php header(“Location: “.$_GET[“go”]); die();  ?>\n",
    "metrics": {
      "complexity": 0.05000000000000001,
      "securityRisk": 0,
      "performanceImpact": 0.00255,
      "obfuscationLevel": 0.020510000000000004
    },
    "fileType": ".php"
  },
  {
    "code": "def legacy\nredirect_to(params.update(action:'main'))\nend\n",
    "metrics": {
      "complexity": 0.016666666666666666,
      "securityRisk": 0.1,
      "performanceImpact": 0.07785,
      "obfuscationLevel": 0.062236666666666676
    },
    "fileType": ".rb"
  },
  {
    "code": "\nconst Koa = require('koa');\nconst urlLib = require('url');\nconst app = new Koa();\n\napp.use(async ctx => {\n\tvar url = ctx.query.target;\n\tctx.redirect(url); \n});\n\napp.listen(3000);",
    "metrics": {
      "complexity": 0.03333333333333333,
      "securityRisk": 0.1,
      "performanceImpact": 0.38395,
      "obfuscationLevel": 0.13012333333333337
    },
    "fileType": ".js"
  },
  {
    "code": "\nconsole.log('WIP')\nconst express = require('express');\nconst router = express.Router()\n\nrouter.get('/login',function(req, res){\n    let followPath = req.query.path;\n    if(req.session.isAuthenticated()){\n        res.redirect('http://example.com/'+followPath); //false positive\n    }else{\n        res.redirect('/');\n    }\n}); \n\nrouter.get('/goto',function(req, res){\n    let url = encodeURI(req.query.url); //vulnerability\n    res.redirect(url);\n}); \n\n\nmodule.exports = router\n",
    "metrics": {
      "complexity": 0.25000000000000006,
      "securityRisk": 0.2,
      "performanceImpact": 0.69885,
      "obfuscationLevel": 0.31977000000000005
    },
    "fileType": ".js"
  },
  {
    "code": "//https://github.com/hardik05/Damn_Vulnerable_C_Program/blob/master/imgRead.c\n\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\nstruct Image\n{\n\tchar header[4];\n\tint width;\n\tint height;\n\tchar data[10];\n};\n\nint ProcessImage(char* filename){\n\n\tFILE *fp;\n\tchar ch;\n\tstruct Image img;\n\n\tfp = fopen(filename,\"r\"); \n\n\tif(fp == NULL)\n\t{\n\t\tprintf(\"\\nCan't open file or file doesn't exist.\");\n\t\texit(0);\n\t}\n\n\tprintf(\"\\n\\tHeader\\twidth\\theight\\tdata\\t\\r\\n\");\n\n\twhile(fread(&img,sizeof(img),1,fp)>0){\n\t\tprintf(\"\\n\\t%s\\t%d\\t%d\\t%s\\r\\n\",img.header,img.width,img.height,img.data);\n\t\n\t\tint size1 = img.width + img.height; //Vulnerability: integer overflow\n\t\tchar* buff1=(char*)malloc(size1);\n\n\t\tmemcpy(buff1,img.data,sizeof(img.data)); //Vulnerability: no data buffer size/malloc success check?\n\t\tfree(buff1);\n\t\n\t\tif (size1/2==0){\n\t\t\tfree(buff1); //Vulnerability: double free\n\t\t}\n\t\telse{\n\t\t\tif(size1 == 123456){\n\t\t\t\tbuff1[0]='a'; //Vulnerability: use after free\n\t\t\t}\n\t\t}\n\n\t\tint size2 = img.width - img.height+100; //Vulnerability: integer underflow\n\t\t//printf(\"Size1:%d\",size1);\n\t\tchar* buff2=(char*)malloc(size2);\n\n\t\tmemcpy(buff2,img.data,sizeof(img.data));\n\n\t\tint size3= img.width/img.height;\n\t\t//printf(\"Size2:%d\",size3);\n\n\t\tchar buff3[10];\n\t\tchar* buff4 =(char*)malloc(size3);\n\t\tmemcpy(buff4,img.data,sizeof(img.data));\n\n\t\tchar OOBR_stack = buff3[size3+100]; //Vulnerability: out of bound read (stack)\n\t\tchar OOBR_heap = buff4[100];\n\n\t\tbuff3[size3+100]='c'; //Vulnerability: out of bound write (Stack)\n\t\tbuff4[100]='c'; //Vulnerability: out of bound write (Heap)\n\n\t\tif(size3>10){\n\t\t\t\tbuff4=0; //memory leak?\n\t\t}\n\t\telse{\n\t\t\tfree(buff4);\n\t\t}\n\n\t\tfree(buff2);\n\t}\n\tfclose(fp);\n}\n\nint main(int argc,char **argv)\n{\n\tProcessImage(argv[1]);\n}\n",
    "metrics": {
      "complexity": 0.7166666666666667,
      "securityRisk": 0,
      "performanceImpact": 1,
      "obfuscationLevel": 0.4866666666666667
    },
    "fileType": ".c"
  },
  {
    "code": "class Example1\n{\n   public $cache_file;\n\n   function __construct()\n   {\n      // some PHP code...\n   }\n\n   function __destruct()\n   {\n      $file = \"/var/www/cache/tmp/{$this->cache_file}\";\n      if (file_exists($file)) @unlink($file);\n   }\n}\n\n// some PHP code...\n\n$user_data = unserialize($_GET['data']);\n\n// some PHP code...\n",
    "metrics": {
      "complexity": 0.26666666666666666,
      "securityRisk": 0,
      "performanceImpact": 0.01635,
      "obfuscationLevel": 0.10993666666666667
    },
    "fileType": ".php"
  },
  {
    "code": "class Example2\n{\n   private $hook;\n\n   function __construct()\n   {\n      // some PHP code...\n   }\n\n   function __wakeup()\n   {\n      if (isset($this->hook)) eval($this->hook);\n   }\n}\n\n// some PHP code...\n\n$user_data = unserialize($_COOKIE['data']);\n\n// some PHP code...\n",
    "metrics": {
      "complexity": 0.23333333333333336,
      "securityRisk": 0.15,
      "performanceImpact": 0.0135,
      "obfuscationLevel": 0.15603333333333336
    },
    "fileType": ".php"
  },
  {
    "code": "<?php \n// Exercise - 1\n// Author: @TheXC3LL\n// Website: Tarlogic.com\nclass login {\n  public $username = \"X-C3LL\";\n  public $password = \"Insanity\";\n  public $role = \"MUGGLE\";\n}\n$one = new login();\n$a = serialize($one);\necho \"Example of an object:\\n$a\\n\\n\";\necho \"FLAG: \\n\";\n$test = unserialize($argv[1]);\n$check = $test->role - 1337;\nif ($check == \"ADMIN\") {\n  $flag = file_get_contents(\"flag.txt\");\n  echo $flag;\n} else {\n  echo \"No flag for you!! Better luck next time!\\n\";\n}\n?>\n",
    "metrics": {
      "complexity": 0.30000000000000004,
      "securityRisk": 0.1,
      "performanceImpact": 0.274,
      "obfuscationLevel": 0.21480000000000005
    },
    "fileType": ".php"
  },
  {
    "code": "<?php\n// Exercise - 2\n// Author: @TheXC3LL\n// Website: Tarlogic.com\n// Modificado de: https://syssec.rub.de/media/emma/veroeffentlichungen/2014/09/10/POPChainGeneration-CCS14.pdf\nclass File {\n  public function flag() {\n    $this->innocent();\n  }\n  public function innocent() {\n    echo \"Aquí no pasa nada :D\\n\";\n  }\n}\nclass GiveFlag extends File {\n  public $offset = 23;\n  public function innocent() {\n    $stuff = fopen(\"flag.txt\", \"r\");\n    fseek($stuff, $this->offset);\n    print fread($stuff, filesize(\"flag.txt\"));\n  }\n}\nclass entry {\n  public function __destruct(){\n    $this->awesome->flag();\n  }\n}\nunserialize($argv[1]);\n?>\n",
    "metrics": {
      "complexity": 0.65,
      "securityRisk": 0,
      "performanceImpact": 0.5815999999999999,
      "obfuscationLevel": 0.37632
    },
    "fileType": ".php"
  },
  {
    "code": "<?php\n// Exercise - 0\n// Author: @TheXC3LL\n// Website: ka0labs.net\nclass warm {\n  public $dir = \".\";\n  public function __wakeup() {\n    echo \"This folder contains:\\n\";\n    system(\"ls \" . $this->dir);\n  }\n}\n$test = new warm();\n$a = serialize($test);\necho \"Example of an object:\\n$a\\n\\n\";\nunserialize($argv[1]);\n?>\n",
    "metrics": {
      "complexity": 0.23333333333333336,
      "securityRisk": 0.15,
      "performanceImpact": 0.01565,
      "obfuscationLevel": 0.15646333333333334
    },
    "fileType": ".php"
  },
  {
    "code": "using Microsoft.AspNetCore.Mvc;\n\nnamespace WebFox.Controllers.PathTraversal\n{\n    public class PathTraversalTest1 : ControllerBase\n    {\n        [HttpGet(\"{path}\")]\n        public void Test(string path)\n        {\n            System.IO.File.Delete(path);\n        }\n\n\n    }\n}",
    "metrics": {
      "complexity": 0.18333333333333335,
      "securityRisk": 0,
      "performanceImpact": 0.01365,
      "obfuscationLevel": 0.07606333333333334
    },
    "fileType": ".cs"
  },
  {
    "code": "using System;\nusing System.IO;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace WebFox.Controllers.PathTraversal\n{\n    public class PathTraversalTest2 : ControllerBase\n    {\n        private const string RootFolder = @\"C:\\Temp\\Data\\\";\n\n        [HttpGet(\"{userInput}\")]\n        public void Test(string userInput)    \n        {    \n            try\n            {\n                var fullPath = Path.Combine(RootFolder, userInput);\n                System.IO.File.Delete(fullPath);\n            }    \n            catch (IOException ioExp)    \n            {    \n                Console.WriteLine(ioExp.Message);    \n            }\n            Console.ReadKey();    \n        }\n    }\n}",
    "metrics": {
      "complexity": 0.3333333333333334,
      "securityRisk": 0,
      "performanceImpact": 0.0334,
      "obfuscationLevel": 0.14001333333333338
    },
    "fileType": ".cs"
  },
  {
    "code": "\nusing System.IO;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace WebFox.Controllers.PathTraversal\n{\n    public class PathTraversalTest3 : ControllerBase\n    {\n        private const string RootFolder = @\"C:\\Temp\\Data\\\"; \n        \n        [HttpGet(\"{userInput}\")]\n        public void Test(string userInput)    \n        {\n            string[] lines = { \"First line\", \"Second line\", \"Third line\" };\n            using (var outputFile = new StreamWriter(RootFolder + userInput))\n            {\n                foreach (var line in lines)\n                    outputFile.WriteLine(line);\n            }\n        }\n    }\n}",
    "metrics": {
      "complexity": 0.3,
      "securityRisk": 0,
      "performanceImpact": 0.1303,
      "obfuscationLevel": 0.14606
    },
    "fileType": ".cs"
  },
  {
    "code": " \nusing System.IO;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace WebFox.Controllers.PathTraversal\n{\n    public class PathTraversalTest4 : ControllerBase\n    {\n        private const string RootFolder = @\"C:\\Temp\\Data\\\"; \n        \n        [HttpGet(\"{userInput}\")]\n        public void Test(string userInput)    \n        {\n            string[] lines = { \"First line\", \"Second line\", \"Third line\" };\n            using var outputFile = new StreamWriter(RootFolder + userInput);\n            foreach (var line in lines)\n                outputFile.WriteLine(line);\n        }\n    }\n}",
    "metrics": {
      "complexity": 0.26666666666666666,
      "securityRisk": 0,
      "performanceImpact": 0.1285,
      "obfuscationLevel": 0.1323666666666667
    },
    "fileType": ".cs"
  },
  {
    "code": "<?php\nif​($_SERVER[​'REQUEST_METHOD'​] === ​\"POST\"​){ $fileContent[​'file'​] = ​false​; header(​'Content-Type: application/json'​); if​(​isset​($_POST[​'file'​])){\nheader(​'Content-Type: application/json'​);\n$_POST[​'file'​] = str_replace( ​array​(​\"../\"​, ​\"..\"\"), \"\", $_POST['file']); if(strpos($_POST['file'], \"​user.txt​\") === false){\n$file = fopen(\"​/​var​/www/html/​\" . $_POST['file'], \"​r​\"); $fileContent['file'] = fread($file,filesize($_POST['file'])); fclose();\n} }\n       echo json_encode($fileContent);\n}\n",
    "metrics": {
      "complexity": 0.25000000000000006,
      "securityRisk": 0,
      "performanceImpact": 0.10085,
      "obfuscationLevel": 0.12017000000000003
    },
    "fileType": ".php"
  },
  {
    "code": "<?php\n$file = $_GET['file'];\n$content = $_GET['content'];\nfile_put_contents(\"/some/path/$file\",$content);\nfclose($fh);\n?>\n",
    "metrics": {
      "complexity": 0.03333333333333333,
      "securityRisk": 0,
      "performanceImpact": 0.0061,
      "obfuscationLevel": 0.014553333333333335
    },
    "fileType": ".php"
  },
  {
    "code": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  const file = readFile(req.query.name).toString()   \n  res.send(file)\n})\n\n\nfunction readFile(path){\n\n    result = fs.readFileSync(path)\n    return result;\n  \n  }\n\n\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\n",
    "metrics": {
      "complexity": 0.19999999999999998,
      "securityRisk": 0.1,
      "performanceImpact": 0.31829999999999997,
      "obfuscationLevel": 0.18366
    },
    "fileType": ".js"
  },
  {
    "code": "const { ApolloServer, gql } = require('apollo-server');\n\nvar fs = require('fs');\nvar express = require('express');\nvar app = express();\n\n\n// A schema is a collection of type definitions (hence \"typeDefs\")\n// that together define the \"shape\" of queries that are executed against\n// your data.\nconst typeDefs = gql`\n  # Comments in GraphQL strings (such as this one) start with the hash (#) symbol.\n\n  # This \"Book\" type defines the queryable fields for every book in our data source.\n  type Book {\n    title: String\n    author: String\n  }\n\n  # The \"Query\" type is special: it lists all of the available queries that\n  # clients can execute, along with the return type for each. In this\n  # case, the \"books\" query returns an array of zero or more Books (defined above).\n  type Query {\n    books(path: String): [Book]\n  }\n`;\n\n\nconst books = [\n    {\n      title: 'The Awakening',\n      author: 'Kate Chopin',\n    },\n    {\n      title: 'City of Glass',\n      author: 'Paul Auster',\n    },\n  ];\n\n\n\n  // Resolvers define the technique for fetching the types defined in the\n// schema. This resolver retrieves books from the \"books\" array above.\nconst resolvers = {\n    Query: {\n      books: (parent, args, context, info) => {\n        const file = readFile(args.path).toString()\n        console.log(file)\n        return [{title: file, author: \"hello\"}]\n    },\n    },\n  };\n\nfunction readFile(path ){\n\n  result = fs.readFileSync(path)\n  return result;\n\n}\n\n  // The ApolloServer constructor requires two parameters: your schema\n// definition and your set of resolvers.\nconst server = new ApolloServer({ \n    introspection: true,\n    typeDefs, resolvers });\n\n \n\n// The `listen` method launches a web server.\nserver.listen().then(({ url }) => {\n  console.log(`🚀  Server ready at ${url}`);\n});\n\n\n",
    "metrics": {
      "complexity": 0.8833333333333334,
      "securityRisk": 0.8999999999999999,
      "performanceImpact": 0.91415,
      "obfuscationLevel": 0.8961633333333334
    },
    "fileType": ".js"
  },
  {
    "code": "\n<?php\n\n$UploadDir = '/var/www/';\n\nif (!(isset($_GET['file'])))\n  die();\n\n\n$file = $_GET['file'];\n\n$path = $UploadDir . $file;\n\nif (!is_file($path))\n  die();\n\nheader('Cache-Control: must-revalidate, post-check=0, pre-check=0');\nheader('Cache-Control: public');\nheader('Content-Disposition: inline; filename=\"' . basename($path) . '\";');\nheader('Content-Transfer-Encoding: binary');\nheader('Content-Length: ' . filesize($path));\n\n$handle = fopen($path, 'rb');\n\ndo {\n$data = fread($handle, 8192);\nif (strlen($data) == 0) {\nbreak;\n}\necho($data);\n} while (true);\n\nfclose($handle);\nexit();\n?>\n",
    "metrics": {
      "complexity": 0.3166666666666667,
      "securityRisk": 0.15,
      "performanceImpact": 0.22940000000000002,
      "obfuscationLevel": 0.23254666666666668
    },
    "fileType": ".php"
  },
  {
    "code": "//https://html5.digi.ninja/challenge.html\n\nif (typeof(SERVER_DOMAIN) === 'undefined') {\n\twindow.location.replace(\"/unconfigured.html\");\n}\n\nconst RECEIVE_URL = SERVER_DOMAIN + \"/challenge_scoreboard.html\" + \"?origin=\" + get_domain();\n\nvar window_ref = null;\n\ndocument.getElementById(\"username\").focus();\n\nfunction store_username() {\n\tvar username;\n\tvar username_obj;\n\n\tusername_obj = document.getElementById(\"username\");\n\tusername = username_obj.value\n\n\tvar welcome;\n\twelcome = document.getElementById(\"welcome\");\n\twelcome.innerHTML = \"Welcome \" + html_encode (username);\n\n\tvar set_username;\n\tset_username = document.getElementById(\"set_username\");\n\tset_username.style.display=\"none\";\n\n\tvar game;\n\tgame = document.getElementById(\"game\");\n\tgame.style.display=\"inline\";\n\n\tstart_game();\n\t// have to do time out so the window can open\n\tsetTimeout (function () {send_username(username);}, 1000);\n\n\treturn false;\n}\n\nfunction check_guess() {\n\tvar guess_obj = document.getElementById(\"guess\");\n\tvar guess = guess_obj.value;\n\tvar res = document.getElementById(\"result\");\n\n\tsend_message(\"guess:\" + guess);\n\n\tdocument.getElementById(\"guess\").focus();\n\tdocument.getElementById(\"guess\").value = \"\";\n}\n\nfunction html_encode (html) {\n\treturn document.createElement( 'a' ).appendChild( \n\t\tdocument.createTextNode( html ) ).parentNode.innerHTML;\n}\n\nfunction send_message(message) {\n\tif (window_ref == null) {\n\t\treturn;\n\t}\n\tif (window_ref.closed) {\n\t\treturn;\n\t}\n\n\twindow_ref.postMessage(message, \"*\");\n\t// window_ref.postMessage(message, RECEIVE_URL);\n}\n\nfunction start_game() {\n\topen_window();\n\tdocument.getElementById(\"guess\").focus();\n}\n\nfunction send_username(username) {\n\tmessage = \"user:\" + html_encode(username);\n\tsend_message(message);\n}\n\nfunction get_domain() {\n\tvar url = window.location.href\n\tvar arr = url.split(\"/\");\n\treturn arr[0] + \"//\" + arr[2]\n}\n\nfunction open_window() {\n\tif (window_ref == null || window_ref.closed) {\n\t\twindow_ref = window.open (RECEIVE_URL, \"score board\", \"height=260,width=550\");\n\n\t\tif (window_ref == null) {\n\t\t\talert (\"Failed to open window. You must allow pop-ups.\");\n\t\t}\n\t}\n}\n\nconst usernameButton = document.getElementById(\"setUsername\");\nusernameButton.addEventListener(\"click\", store_username, false);\n\nconst guessButton = document.getElementById(\"checkGuess\");\nguessButton.addEventListener(\"click\", check_guess, false);\n\nstart_game();\n",
    "metrics": {
      "complexity": 1,
      "securityRisk": 0.3,
      "performanceImpact": 1,
      "obfuscationLevel": 0.72
    },
    "fileType": ".js"
  },
  {
    "code": "//https://html5.digi.ninja\n\nif (typeof(SERVER_DOMAIN) === 'undefined') {\n\twindow.location.replace(\"/unconfigured.html\");\n}\n\nconst RECEIVE_URL = SERVER_DOMAIN + \"/s_child.html\" + \"?origin=\" + get_domain();\n\nvar window_ref = null;\n\nfunction send_message(destination) {\n\tmessage = document.getElementById(\"message\").value;\n\treceiver.contentWindow.postMessage(message, SERVER_DOMAIN);\n}\n\nfunction get_domain() {\n\tvar url = window.location.href\n\tvar arr = url.split(\"/\");\n\treturn arr[0] + \"//\" + arr[2]\n}\n\nvar receiver = document.getElementById(\"s_iframe\");\nreceiver.src = RECEIVE_URL;\n\nconst sendMessageButton = document.getElementById(\"send_message_button\");\nsendMessageButton.addEventListener(\"click\", send_message, false);\n",
    "metrics": {
      "complexity": 0.26666666666666666,
      "securityRisk": 0,
      "performanceImpact": 1,
      "obfuscationLevel": 0.3066666666666667
    },
    "fileType": ".js"
  },
  {
    "code": "function receiveMessage(message) {\n\tlet tokenSpan = document.getElementById(\"token\");\n\tif (message.data == null) {\n\t\ttokenSpan.innerText = \"<Unset>\";\n\t} else {\n\t\ttokenSpan.innerText = message.data;\n\t}\n}\n\nwindow.addEventListener(\"message\", receiveMessage, false);\n",
    "metrics": {
      "complexity": 0.16666666666666666,
      "securityRisk": 0.4,
      "performanceImpact": 0.58815,
      "obfuscationLevel": 0.3442966666666667
    },
    "fileType": ".js"
  },
  {
    "code": "const express = require('express');\nconst router = express.Router()\n\nconst lodash = require('lodash');\n \n//if req.body.config == '{\"constructor\": {\"prototype\": {\"isAdmin\": true}}}' it will bypass the authentication\nfunction check(req, res) {\n\n    let config = {};\n    lodash.defaultsDeep(config, JSON.parse(req.body.config));\n    \n    let user = getCurrentUser();\n    if(!user){\n      user = {};\n    }\n    \n    if (user.isAdmin && user.isAdmin === true) {\n        res.send('Welcome Admin')\n    }else{\n        res.send('Welcome User')\n    }\n}\n\n//fake function that get current user from session or db\nfunction getCurrentUser(){\n  return false;\n}\n\n\nrouter.post('/check-user',check)\n\nmodule.exports = router\n",
    "metrics": {
      "complexity": 0.6,
      "securityRisk": 0.1,
      "performanceImpact": 0.63525,
      "obfuscationLevel": 0.40705
    },
    "fileType": ".js"
  },
  {
    "code": "const express = require('express');\nconst router = express.Router()\n\n\nrouter.get(\"/tstMe\", (req, res) => { \n    var r = /([a-z]+)+$/;\n\n    let match = r.test(req.params.id);\n    res.send(match)\n    \n});\n\n\nmodule.exports = router\n",
    "metrics": {
      "complexity": 0.03333333333333333,
      "securityRisk": 0,
      "performanceImpact": 0.31145,
      "obfuscationLevel": 0.07562333333333333
    },
    "fileType": ".js"
  },
  {
    "code": "int rPort = Int32.Parse(Request.get_Item(\"remotePort \"));\nIPEndPoint endpoint = new IPEndPoint(address,rPort);\nsocket = new Socket(endpoint.AddressFamily, \nSocketType.Stream, ProtocolType.Tcp);\nsocket.Connect(endpoint);\n",
    "metrics": {
      "complexity": 0,
      "securityRisk": 0,
      "performanceImpact": 0.011000000000000001,
      "obfuscationLevel": 0.0022
    },
    "fileType": ".asp"
  },
  {
    "code": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Data.SqlClient;\n\nnamespace WebFox.Controllers\n{\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class Sqli : ControllerBase\n    {\n\n        private readonly ILogger<Sqli> _logger;\n\n        public Sqli(ILogger<Sqli> logger)\n        {\n            _logger = logger;\n        }\n\n\n        [HttpGet(\"{id}\")]\n        public string DoSqli(string id)\n        {\n            string conString = \"I AM a connection String\";\n            using (SqlCommand cmd = new SqlCommand(\"SELECT * FROM users WHERE userId = '\" + id + \"'\"))\n            {\n                using (SqlConnection con = new SqlConnection(conString))\n                {\n                    con.Open();\n                    cmd.Connection = con;\n                    SqlDataReader reader = cmd.ExecuteReader();\n                    string res = \"\";\n                    while (reader.Read())\n                    {\n                        res += reader[\"userName\"];\n                    }\n                    return res;\n                }\n            }\n        }\n    }\n}",
    "metrics": {
      "complexity": 0.35000000000000003,
      "securityRisk": 0,
      "performanceImpact": 0.4058,
      "obfuscationLevel": 0.22116000000000002
    },
    "fileType": ".cs"
  },
  {
    "code": "<?php\n\nrequire_once('../_helpers/strip.php');\n\n// this database contains a table with 2 rows\n// This is my first secret (ID = 1)\n// This is my second secret (ID = 2)\n$db = new SQLite3('test.db');\n\nif (strlen($_GET['id']) < 1) {\n  echo 'Usage: ?id=1';\n} else {\n  // don't sanitize user input, making the SQL query vulnerable to\n  // an injection. The query result only returns a row count, making\n  // it blind. It can be exploited based on whether the server\n  // responds with \"Yes!\" or \"No!\"\n  $count = $db->querySingle('select count(*) from secrets where id = ' . $_GET['id']);\n\n  if ($count > 0) {\n    echo 'Yes!';\n  } else {\n    echo 'No!';\n  }\n}\n",
    "metrics": {
      "complexity": 0.25000000000000006,
      "securityRisk": 0.8,
      "performanceImpact": 0.2826,
      "obfuscationLevel": 0.4765200000000001
    },
    "fileType": ".php"
  },
  {
    "code": "class ApplicationController < ActionController::Base\nprotect_from_forgery with: :exception\nend\nclass UsersController < ApplicationController\ndef update\ncon = Mysql.new 'localhost', 'user', 'pwd'\ncon.query 'UPDATE users set name = ' + params[:name] +\n' where id = ' + params[:id]\ncon.close\nend\nend\n",
    "metrics": {
      "complexity": 0.20000000000000004,
      "securityRisk": 0.30000000000000004,
      "performanceImpact": 0.18985,
      "obfuscationLevel": 0.23797000000000004
    },
    "fileType": ".rb"
  },
  {
    "code": "var mysql = require('db-mysql');\nvar http = require('http');\nvar out;\nvar valTom;\nvar req = http.request(options, function(res)\n{\n\tres.on('data', function(chunk)\n\t{\n\t\tvalTom = chunk;\n\t}\n\t);\n}\n);\nnew mysql.Database(\n{\n\thostname: 'localhost',\n\tuser: 'user',\n\tpassword: 'password',\n\tdatabase: 'test'\n}\n).connect(function(error)\n{\n\tvar the_Query =\n\t\"INSERT INTO Customers (CustomerName, ContactName) VALUES ('Tom',\" +\n\tvalTom + \")\";\n\tthis.query(the_Query).execute(function(error, result)\n\t{\n\t\tif (error)\n\t\t{\n\t\t\tconsole.log(\"Error: \" + error);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconsole.log('GENERATED id: ' + result.id);\n\t\t}\n\t}\n\t);\n\tout = resIn;\n}\n);\n",
    "metrics": {
      "complexity": 0.5000000000000001,
      "securityRisk": 0.85,
      "performanceImpact": 0.5565,
      "obfuscationLevel": 0.6513
    },
    "fileType": ".js"
  },
  {
    "code": "const express = require('express');\nconst router = express.Router()\n\nconst config = require('../../config')\nconst mysql      = require('mysql');\nconst connection = mysql.createConnection({\n  host     : config.MYSQL_HOST,\n  port     : config.MYSQL_PORT,\n  user     : config.MYSQL_USER,\n  password : config.MYSQL_PASSWORD,\n  database : config.MYSQL_DB_NAME,\n});\n \nconnection.connect();\n\nrouter.get('/example1/user/:id', (req,res) => {\n    let userId = req.params.id;\n    let query = {\n        sql : \"SELECT * FROM users WHERE id=\" + userId\n    }\n    connection.query(query,(err, result) => {\n        res.json(result);\n    });\n})\n\nrouter.get('/example2/user/:id',  (req,res) => {\n    let userId = req.params.id;\n    connection.query(\"SELECT * FROM users WHERE id=\" + userId,(err, result) => {\n        res.json(result);\n    });\n})\n\nrouter.get('/example3/user/:id',  (req,res) => {\n    let userId = req.params.id;\n    connection.query({\n        sql : \"SELECT * FROM users WHERE id=\" +userId\n    },(err, result) => {\n        res.json(result);\n    });\n})\n\n\nmodule.exports = router\n",
    "metrics": {
      "complexity": 0.4666666666666666,
      "securityRisk": 1,
      "performanceImpact": 0.7286999999999999,
      "obfuscationLevel": 0.7324066666666667
    },
    "fileType": ".js"
  },
  {
    "code": "var express = require('express')\n\nvar app = express()\nconst Sequelize = require('sequelize');\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  dialect: 'sqlite',\n  storage: 'data/juiceshop.sqlite'\n});\n\napp.post('/login', function (req, res) {\n    sequelize.query('SELECT * FROM Products WHERE name LIKE ' +  req.body.username);\n  })",
    "metrics": {
      "complexity": 0.13333333333333333,
      "securityRisk": 0.5,
      "performanceImpact": 0.16775,
      "obfuscationLevel": 0.2868833333333334
    },
    "fileType": ".js"
  },
  {
    "code": "<?php\n\nrequire_once('../_helpers/strip.php');\n\n// this database contains a table with 2 rows\n// This is my first secret (ID = 1)\n// This is my second secret (ID = 2)\n$db = new SQLite3('test.db');\n\nif (strlen($_GET['id']) < 1) {\n  echo 'Usage: ?id=1';\n} else {\n  // don't sanitize user input, making the SQL query vulnerable to\n  // an injection. The query result only returns a row count, making\n  // it blind. It can be exploited based on whether the server\n  // responds with \"Yes!\" or \"No!\"\n  $count = $db->querySingle('select count(*) from secrets where id = ' . $_GET['id']);\n\n  if ($count > 0) {\n    echo 'Yes!';\n  } else {\n    echo 'No!';\n  }\n}\n",
    "metrics": {
      "complexity": 0.25000000000000006,
      "securityRisk": 0.8,
      "performanceImpact": 0.2826,
      "obfuscationLevel": 0.4765200000000001
    },
    "fileType": ".php"
  },
  {
    "code": "const express = require('express');\nconst router = express.Router()\nconst request = require('request');\n\nrouter.post('/downlad-url', (req, res) => {\n    downloadURL(req.body.url, () =>{\n        res.send('Done')\n    }) \n});\n\nconst downloadURL = (url, onend) => {\n    const opts = {\n      uri: url,\n      method: 'GET',\n      followAllRedirects: true\n    }\n  \n    request(opts)\n      .on('data', ()=>{})\n      .on('end', () => onend())\n      .on('error', (err) => console.log(err, 'controller.url.download.error'))\n}\n\nmodule.exports = router\n",
    "metrics": {
      "complexity": 0.25,
      "securityRisk": 0,
      "performanceImpact": 1,
      "obfuscationLevel": 0.30000000000000004
    },
    "fileType": ".js"
  },
  {
    "code": "# frozen_string_literal: true\n# Be sure to restart your server when you modify this file.\n\nRailsgoat::Application.config.secret_key_base = \"2f1d90a26236c3245d96f5606c201a780dc9ca687e5ed82b45e211bb5dc84c1870f61ca9e002dad5dd8a149c9792d8f07f31a9575065cca064bd6af44f8750e4\"\n",
    "metrics": {
      "complexity": 0.08333333333333333,
      "securityRisk": 0.2,
      "performanceImpact": 0.0885,
      "obfuscationLevel": 0.13103333333333333
    },
    "fileType": ".rb"
  },
  {
    "code": "import depthLimit from 'graphql-depth-limit'\nimport express from 'express'\nimport graphqlHTTP from 'express-graphql'\nimport schema from './schema'\n\n\nconst app = express() \n// depthlimit prevents nested queries\napp.use('/graphql', graphqlHTTP((req, res) => ({ \n  schema,\n  validationRules: [ depthLimit(10) ]\n})))\n",
    "metrics": {
      "complexity": 0.05000000000000001,
      "securityRisk": 0,
      "performanceImpact": 0.09065,
      "obfuscationLevel": 0.038130000000000004
    },
    "fileType": ".ts"
  },
  {
    "code": "\nvar password = 'mysecretpass'; \n\nconst fooPassword = 'mysecretpass'; \n\n",
    "metrics": {
      "complexity": 0,
      "securityRisk": 0.30000000000000004,
      "performanceImpact": 0.0036000000000000003,
      "obfuscationLevel": 0.12072000000000002
    },
    "fileType": ".ts"
  },
  {
    "code": "// composer require \"twig/twig\"\nrequire 'vendor/autoload.php';\n\nclass Template {\n    private $twig;\n\n    public function __construct() {\n        $indexTemplate = '<img ' .\n            'src=\"https://loremflickr.com/320/240\">' .\n            '<a href=\"{{link|escape}}\">Next slide »</a>';\n\n        // Default twig setup, simulate loading\n        // index.html file from disk\n        $loader = new Twig\\Loader\\ArrayLoader([\n            'index.html' => $indexTemplate\n        ]);\n        $this->twig = new Twig\\Environment($loader);\n    }\n\n    public function getNexSlideUrl() {\n        $nextSlide = $_GET['nextSlide'];\n        return filter_var($nextSlide, FILTER_VALIDATE_URL);\n    }\n\n    public function render() {\n        echo $this->twig->render(\n            'index.html',\n            ['link' => $this->getNexSlideUrl()]\n        );\n    }\n}\n\n(new Template())->render();\n",
    "metrics": {
      "complexity": 0.35000000000000003,
      "securityRisk": 0,
      "performanceImpact": 0.5184,
      "obfuscationLevel": 0.24368
    },
    "fileType": ".php"
  },
  {
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n \n#define MY_TMP_FILE \"/tmp/file.tmp\"\n \n \nint main(int argc, char* argv[])\n{\n    FILE * f;\n    if (!access(MY_TMP_FILE, F_OK)) {\n        printf external link(\"File exists!\\n\");\n        return EXIT_FAILURE;\n    }\n    /* At this point the attacker creates a symlink from /tmp/file.tmp to /etc/passwd */\n    tmpFile = fopen(MY_TMP_FILE, \"w\");\n \n    if (tmpFile == NULL) {\n        return EXIT_FAILURE;\n    }\n \n    fputs(\"Some text...\\n\", tmpFile);\n \n    fclose(tmpFile);\n    /* You successfully overwrote /etc/passwd (at least if you ran this as root) */\n \n    return EXIT_SUCCESS;\n}\n",
    "metrics": {
      "complexity": 0.20000000000000004,
      "securityRisk": 0,
      "performanceImpact": 0.40695,
      "obfuscationLevel": 0.16139000000000003
    },
    "fileType": ".c"
  },
  {
    "code": "\n\n//safeLoadAll and jsyaml.safeLoad are vulnerable if DEFAULT_FULL_SCHEMA is used \nconst jsyaml = require(\"js-yaml\");\n\nvar express = require('express');\nvar app = express();\napp.post('/store/:id', function(req, res) {\n  let data;\n  let unsafeConfig = { schema: jsyaml.DEFAULT_FULL_SCHEMA };\n  data = jsyaml.safeLoad(req.params.data, unsafeConfig); ",
    "metrics": {
      "complexity": 0.15000000000000002,
      "securityRisk": 0,
      "performanceImpact": 0.24239999999999998,
      "obfuscationLevel": 0.10848000000000001
    },
    "fileType": ".js"
  },
  {
    "code": "var express = require('express');\nvar cookieParser = require('cookie-parser');\nvar escape = require('escape-html');\nvar serialize = require('node-serialize');\nvar app = express();\napp.use(cookieParser())\n \napp.get('/', function(req, res) {\n if (req.cookies.profile) {\n   var str = new Buffer(req.cookies.profile, 'base64').toString();\n   var obj = serialize.unserialize(str);\n   if (obj.username) {\n     res.send(\"Hello \" + escape(obj.username));\n   }\n } else {\n     res.cookie('profile', \"eyJ1c2VybmFtZSI6ImFqaW4iLCJjb3VudHJ5IjoiaW5kaWEiLCJjaXR5IjoiYmFuZ2Fsb3JlIn0=\", {\n       maxAge: 900000,\n       httpOnly: true\n     });\n }\n res.send(\"Hello World\");\n});\napp.listen(3000);\n",
    "metrics": {
      "complexity": 0.3,
      "securityRisk": 0,
      "performanceImpact": 0.8588,
      "obfuscationLevel": 0.29176
    },
    "fileType": ".js"
  },
  {
    "code": "class ViewFile { public $filename = ''; \n\n\npublic function __toString()\n\n\n { include $this->filename; return \"\"; } }\n\n\n\n if (isset($_GET['page']))\n \n \n { $pdfobject = unserialize(base64_decode($_GET['page'])); } \n \n else { $pdfobject = new File(); } ?> \n",
    "metrics": {
      "complexity": 0.25000000000000006,
      "securityRisk": 0,
      "performanceImpact": 0.012700000000000001,
      "obfuscationLevel": 0.10254000000000003
    },
    "fileType": ".php"
  },
  {
    "code": "//https://github.com/hardik05/Damn_Vulnerable_C_Program/blob/master/imgRead.c\n\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\nstruct Image\n{\n\tchar header[4];\n\tint width;\n\tint height;\n\tchar data[10];\n};\n\nint ProcessImage(char* filename){\n\n\tFILE *fp;\n\tchar ch;\n\tstruct Image img;\n\n\tfp = fopen(filename,\"r\"); \n\n\tif(fp == NULL)\n\t{\n\t\tprintf(\"\\nCan't open file or file doesn't exist.\");\n\t\texit(0);\n\t}\n\n\tprintf(\"\\n\\tHeader\\twidth\\theight\\tdata\\t\\r\\n\");\n\n\twhile(fread(&img,sizeof(img),1,fp)>0){\n\t\tprintf(\"\\n\\t%s\\t%d\\t%d\\t%s\\r\\n\",img.header,img.width,img.height,img.data);\n\t\n\t\tint size1 = img.width + img.height; //Vulnerability: integer overflow\n\t\tchar* buff1=(char*)malloc(size1);\n\n\t\tmemcpy(buff1,img.data,sizeof(img.data)); //Vulnerability: no data buffer size/malloc success check?\n\t\tfree(buff1);\n\t\n\t\tif (size1/2==0){\n\t\t\tfree(buff1); //Vulnerability: double free\n\t\t}\n\t\telse{\n\t\t\tif(size1 == 123456){\n\t\t\t\tbuff1[0]='a'; //Vulnerability: use after free\n\t\t\t}\n\t\t}\n\n\t\tint size2 = img.width - img.height+100; //Vulnerability: integer underflow\n\t\t//printf(\"Size1:%d\",size1);\n\t\tchar* buff2=(char*)malloc(size2);\n\n\t\tmemcpy(buff2,img.data,sizeof(img.data));\n\n\t\tint size3= img.width/img.height;\n\t\t//printf(\"Size2:%d\",size3);\n\n\t\tchar buff3[10];\n\t\tchar* buff4 =(char*)malloc(size3);\n\t\tmemcpy(buff4,img.data,sizeof(img.data));\n\n\t\tchar OOBR_stack = buff3[size3+100]; //Vulnerability: out of bound read (stack)\n\t\tchar OOBR_heap = buff4[100];\n\n\t\tbuff3[size3+100]='c'; //Vulnerability: out of bound write (Stack)\n\t\tbuff4[100]='c'; //Vulnerability: out of bound write (Heap)\n\n\t\tif(size3>10){\n\t\t\t\tbuff4=0; //memory leak?\n\t\t}\n\t\telse{\n\t\t\tfree(buff4);\n\t\t}\n\n\t\tfree(buff2);\n\t}\n\tfclose(fp);\n}\n\nint main(int argc,char **argv)\n{\n\tProcessImage(argv[1]);\n}\n",
    "metrics": {
      "complexity": 0.7166666666666667,
      "securityRisk": 0,
      "performanceImpact": 1,
      "obfuscationLevel": 0.4866666666666667
    },
    "fileType": ".c"
  },
  {
    "code": "using Microsoft.AspNetCore.Mvc;\nusing System.Xml;\n\nnamespace WebFox.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class XPath : ControllerBase\n    {\n        [HttpGet(\"{user}\")]\n        public void XPATH(string user)\n        {\n            // Load the document and set the root element.  \n            XmlDocument doc = new XmlDocument();\n            doc.Load(\"bookstore.xml\");\n            XmlNode root = doc.DocumentElement;\n\n            // Add the namespace.  \n            XmlNamespaceManager nsmgr = new XmlNamespaceManager(doc.NameTable);\n            nsmgr.AddNamespace(\"bk\", \"urn:newbooks-schema\");\n\n            XmlNode node = root.SelectSingleNode(\n                \"descendant::bk:book[bk:author/bk:last-name='\"+user+\"']\", nsmgr);\n        }\n    }\n}",
    "metrics": {
      "complexity": 0.2833333333333334,
      "securityRisk": 0.1,
      "performanceImpact": 0.5391,
      "obfuscationLevel": 0.2611533333333334
    },
    "fileType": ".cs"
  },
  {
    "code": "\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Web;\n\nnamespace WebFox.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class XSS : ControllerBase\n    {\n        public async void xss(string userInfo)\n        {\n            var context = this.ControllerContext.HttpContext;\n\n            await context.Response.WriteAsync(\"<body>\"+ userInfo +\"</body>\");\n\n        }\n    }\n}\n",
    "metrics": {
      "complexity": 0.15,
      "securityRisk": 0,
      "performanceImpact": 0.17629999999999998,
      "obfuscationLevel": 0.09526
    },
    "fileType": ".cs"
  },
  {
    "code": "<?php\nrequire_once('../_helpers/strip.php');\n?>\n<html>\n  <!-- From https://portswigger.net/web-security/dom-based/dom-clobbering -->\n  <head>\n\n  </head>\n  <body>\n    <p>\n      Hi, <?= $_GET['name']; ?>\n    </p>\n    <script>\n      window.onload = function(){\n        let someObject = window.someObject || {};\n        let script = document.createElement('script');\n        script.src = someObject.url;\n        document.body.appendChild(script);\n     };\n    </script>\n  </body>\n</html>\n",
    "metrics": {
      "complexity": 0.20000000000000004,
      "securityRisk": 0,
      "performanceImpact": 0.9991500000000001,
      "obfuscationLevel": 0.27983
    },
    "fileType": ".php"
  },
  {
    "code": "<?php\n\nrequire_once('../_helpers/strip.php');\n\n// the `name` variable isn't getting sanitized, making it vulnerable\n// to a reflected Cross-Site Scripting vulnerability.\necho 'Hello, ' . $_GET['name']\n",
    "metrics": {
      "complexity": 0.016666666666666666,
      "securityRisk": 0,
      "performanceImpact": 0.08505,
      "obfuscationLevel": 0.02367666666666667
    },
    "fileType": ".php"
  },
  {
    "code": "const express = require('express')\nconst router = express.Router()\n\nrouter.get('/greeting', (req, res) => {\n    const { name }  = req.query;\n    res.send('<h1> Hello :'+ name +\"</h1>\")\n})\n\nrouter.get('/greet-template', (req,res) => {\n    name = req.query.name\n    res.render('index', { user_name: name});\n})\n\nmodule.exports = router\n",
    "metrics": {
      "complexity": 0.16666666666666666,
      "securityRisk": 0.2,
      "performanceImpact": 0.16665,
      "obfuscationLevel": 0.17999666666666667
    },
    "fileType": ".js"
  },
  {
    "code": "using System.Net;\nusing System.Security.Cryptography;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace WebFox.Controllers\n{\n    public class SecureCookieTest1: ControllerBase\n    {\n        [HttpGet(\"{response}\")]\n        [HttpGet(\"{request}\")]\n        \n        // HttpCookie myCookie = new HttpCookie(\"Sensitive cookie\");\n        public void DoPost(HttpWebResponse response, HttpWebRequest request)\n        {\n            DoGet(response, request);\n        }\n\n        public void DoGet(HttpWebResponse response, HttpWebRequest request)\n        {\n            Unsafe(response, request);\n        }\n\n        public void Unsafe(HttpWebResponse response, HttpWebRequest request)\n        {\n            string password = \"p-\" + RandomNumberGenerator.GetInt32(200000000, 2000000000);\n            \n            Cookie cookie = new Cookie(\"password\",password);\n            cookie.Path = \"/\";\n            cookie.Domain = \"\";\n            cookie.Comment = \"Cookie Description\";\n            response.Cookies.Add(cookie);\n        }\n    }\n}\n",
    "metrics": {
      "complexity": 0.2833333333333334,
      "securityRisk": 0.30000000000000004,
      "performanceImpact": 0.1524,
      "obfuscationLevel": 0.2638133333333334
    },
    "fileType": ".cs"
  },
  {
    "code": "using System.Net;\nusing System.Security.Cryptography;\nusing Microsoft.AspNetCore.Http;\n\nnamespace WebFox.Controllers\n{\n    public class SecureCookieTest2\n    {\n        // HttpCookie myCookie = new HttpCookie(\"Sensitive cookie\");\n        public void DoPost(HttpWebResponse response, HttpWebRequest request)\n        {\n            DoGet(response, request);\n        }\n\n        public void DoGet(HttpWebResponse response, HttpWebRequest request)\n        {\n            Unsafe(response, request);\n        }\n\n        public void Unsafe(HttpWebResponse response, HttpWebRequest request)\n        {\n            string password = \"p-\" + RandomNumberGenerator.GetInt32(200000000, 2000000000);\n            response.Cookies.Add(new Cookie(\"password\", password));\n        }\n    }\n}",
    "metrics": {
      "complexity": 0.19999999999999998,
      "securityRisk": 0.30000000000000004,
      "performanceImpact": 0.13825,
      "obfuscationLevel": 0.22765000000000002
    },
    "fileType": ".cs"
  },
  {
    "code": "using NUnit.Framework;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text;\nusing System.Xml;\n\nnamespace XXEExamples.Tests\n{\n    [TestFixture]\n    public class XmlReader_Tests\n    {\n        [Test]\n        public void XMLReader_WithDTDProcessingParseAndXmlResolverSet_NotSafe()\n        {\n            AssertXXE.IsXMLParserSafe((string xml) =>\n            {\n                XmlReaderSettings settings = new XmlReaderSettings();\n                settings.DtdProcessing = DtdProcessing.Parse;\n                settings.XmlResolver = new XmlUrlResolver();\n                settings.MaxCharactersFromEntities = 6000;\n\n                using (MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(xml)))\n                {\n                    XmlReader reader = XmlReader.Create(stream, settings);\n\n                    var xmlDocument = new XmlDocument();\n                    xmlDocument.XmlResolver = new XmlUrlResolver();\n                    xmlDocument.Load(reader);\n                    return xmlDocument.InnerText;\n                }\n            }, false);\n        }\n\n        [Test]\n        public void XMLReader_WithDTDProcessingIgnored_Safe()\n        {\n            var exception = Assert.Throws<XmlException>(() =>\n            {\n                AssertXXE.IsXMLParserSafe((string xml) =>\n                {\n                    XmlReaderSettings settings = new XmlReaderSettings();\n                    settings.DtdProcessing = DtdProcessing.Ignore;\n                    settings.MaxCharactersFromEntities = 6000;\n\n                    using (MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(xml)))\n                    {\n                        XmlReader reader = XmlReader.Create(stream, settings);\n\n                        var xmlDocument = new XmlDocument();\n                        xmlDocument.XmlResolver = new XmlUrlResolver();\n                        xmlDocument.Load(reader);\n                        return xmlDocument.InnerText;\n                    }\n                }, true);\n            });\n\n            Assert.IsTrue(exception.Message.StartsWith(\"Reference to undeclared entity 'xxe'.\"));\n        }\n\n        [Test]\n        public void XMLReader_WithDTDProcessingProhibited_Safe()\n        {\n            var exception = Assert.Throws<XmlException>(() =>\n            {\n                AssertXXE.IsXMLParserSafe((string xml) =>\n                {\n                    XmlReaderSettings settings = new XmlReaderSettings();\n                    settings.DtdProcessing = DtdProcessing.Prohibit;\n                    settings.MaxCharactersFromEntities = 6000;\n\n                    using (MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(xml)))\n                    {\n                        XmlReader reader = XmlReader.Create(stream, settings);\n\n                        var xmlDocument = new XmlDocument();\n                        xmlDocument.XmlResolver = new XmlUrlResolver();\n                        xmlDocument.Load(reader);\n                        return xmlDocument.InnerText;\n                    }\n                }, true);\n            });\n\n            Assert.IsTrue(exception.Message.StartsWith(\"For security reasons DTD is prohibited in this XML document.\"));\n        }\n    }\n}\n",
    "metrics": {
      "complexity": 0.46666666666666673,
      "securityRisk": 0,
      "performanceImpact": 0.26195,
      "obfuscationLevel": 0.2390566666666667
    },
    "fileType": ".cs"
  },
  {
    "code": "<?php\n\nrequire_once('../_helpers/strip.php');\n\n// https://depthsecurity.com/blog/exploitation-xml-external-entity-xxe-injection\n\nlibxml_disable_entity_loader (false);\n\n$xml = strlen($_GET['xml']) > 0 ? $_GET['xml'] : '<root><content>No XML found</content></root>';\n\n$document = new DOMDocument();\n$document->loadXML($xml, LIBXML_NOENT | LIBXML_DTDLOAD);\n$parsedDocument = simplexml_import_dom($document);\n\necho $parsedDocument->content;\n",
    "metrics": {
      "complexity": 0.06666666666666667,
      "securityRisk": 0,
      "performanceImpact": 0.5718500000000001,
      "obfuscationLevel": 0.1410366666666667
    },
    "fileType": ".php"
  },
  {
    "code": "<?php\nlibxml_disable_entity_loader (false);\n$xmlfile = file_get_contents('php://input');\n$dom = new DOMDocument();\n$dom->loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);\n$info = simplexml_import_dom($dom);\n$name = $info->name;\n$tel = $info->tel;\n$email = $info->email;\n$password = $info->password;\n\necho \"Sorry, $email is already registered!\";\n?>\n",
    "metrics": {
      "complexity": 0.05000000000000001,
      "securityRisk": 0.2,
      "performanceImpact": 0.41740000000000005,
      "obfuscationLevel": 0.18348000000000003
    },
    "fileType": ".php"
  },
  {
    "code": "const express = require('express')\nconst libxmljs = require('libxml')\nconst db = require('db');\nconst router = express.Router()\n\nrouter.post('/upload-products', (req, res) => {\n    const XMLfile = req.files.products.data;\n\tconst products = libxmljs.parseXmlString(XMLfile, {noent:true,noblanks:true})\n\n\tproducts.root().childNodes().forEach(product => {\n\t\tlet newProduct = new db.Product()\n\t\tnewProduct.name = product.childNodes()[0].text()\n\t\tnewProduct.description = product.childNodes()[3].text()\n\t\tnewProduct.save()\n    });\n    \n    res.send('Thanks')\n})\n\nmodule.exports = router\n",
    "metrics": {
      "complexity": 0.16666666666666666,
      "securityRisk": 0,
      "performanceImpact": 1,
      "obfuscationLevel": 0.26666666666666666
    },
    "fileType": ".js"
  },
  {
    "code": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Xml;\n\nnamespace WebFox.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class XxeTest1 : ControllerBase\n    {\n\n        [HttpGet(\"{xmlString}\")]\n        public void DoXxe(String xmlString)\n        {\n            XmlDocument xmlDoc = new XmlDocument();\n            xmlDoc.LoadXml(xmlString);\n        }\n    }\n}",
    "metrics": {
      "complexity": 0.18333333333333335,
      "securityRisk": 0,
      "performanceImpact": 0.01965,
      "obfuscationLevel": 0.07726333333333335
    },
    "fileType": ".cs"
  },
  {
    "code": "using System;\nusing System.IO;\nusing System.IO.Compression;\n\nnamespace myApp\n{\n    class Program\n    {\n    static void Main(string[] args)\n    {\n        string zipPath = \"/home/snoopy/extract/evil.zip\";\n        Console.WriteLine(\"Enter Path of Zip File to extract:\");\n        string zipPath = Console.ReadLine();\n        Console.WriteLine(\"Enter Path of Destination Folder\");\n        string extractPath = Console.ReadLine();\n\n        using (ZipArchive archive = ZipFile.OpenRead(zipPath))\n        {\n            foreach (ZipArchiveEntry entry in archive.Entries)\n            {\n \n                    entry.ExtractToFile(Path.Combine(extractPath, entry.FullName));\n                    Console.WriteLine(extractPath);\n                }\n            }\n        } \n    }\n}\n\n",
    "metrics": {
      "complexity": 0.38333333333333336,
      "securityRisk": 0,
      "performanceImpact": 0.2883,
      "obfuscationLevel": 0.21099333333333337
    },
    "fileType": ".cs"
  },
  {
    "code": "function sensitiveFunction() {\n  const apiKey = \"secret_key_123\";\n  return fetch(\"https://api.example.com\", {\n    headers: { Authorization: apiKey }\n  });\n}\n\nclass ComplexClass {\n  private data: any[];\n  \n  constructor() {\n    this.data = [];\n  }\n\n  processData(input: number) {\n    for (let i = 0; i < input; i++) {\n      if (i % 2 === 0) {\n        this.data.push(Math.pow(i, 2));\n      } else {\n        this.data.push(Math.sqrt(i));\n      }\n    }\n    return this.data.reduce((a, b) => a + b, 0);\n  }\n}",
    "metrics": {
      "complexity": 0.5166666666666667,
      "securityRisk": 0.2,
      "performanceImpact": 0.87515,
      "obfuscationLevel": 0.46169666666666676
    },
    "fileType": ".ts"
  },
  {
    "code": "function processUserData(userData: any) {\n  // Potentially dangerous eval usage\n  eval(userData.code);\n  \n  // SQL query with potential injection\n  const query = `SELECT * FROM users WHERE id = ${userData.id}`;\n  \n  // Complex nested loops\n  for (let i = 0; i < userData.items.length; i++) {\n    for (let j = 0; j < userData.items[i].length; j++) {\n      for (let k = 0; k < 1000; k++) {\n        processItem(userData.items[i][j], k);\n      }\n    }\n  }\n\n  // Sensitive data handling\n  const userPassword = userData.password;\n  const apiKey = \"secret_key_123\";\n  \n  // Memory intensive operations\n  const largeArray = new Array(1000000).fill(0);\n  largeArray.forEach(item => {\n    heavyComputation(item);\n  });\n\n  return {\n    success: true,\n    token: apiKey\n  };\n}\n\nfunction processItem(item: any, index: number) {\n  // Some processing\n  return item * index;\n}\n\nfunction heavyComputation(value: number) {\n  for (let i = 0; i < value; i++) {\n    Math.pow(i, 2);\n  }\n}\n\nexport { processUserData };",
    "metrics": {
      "complexity": 0.7333333333333334,
      "securityRisk": 0.8999999999999999,
      "performanceImpact": 1,
      "obfuscationLevel": 0.8533333333333333
    },
    "fileType": ".ts"
  }
]